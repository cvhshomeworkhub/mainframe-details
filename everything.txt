--- TECH THEATER 1 ---
(Building Materials)
Materials
Wood
Plywood
Description: Composed of multiple layers (plies) glued together.
Common thickness: 3/4” for skin platforms and stair treads.
Examples:
5-ply → 5 layers
6-ply → 6 layers
<aside> **Skinning** → Surfacing something, often with plywood. </aside>
Luan/Lauan
Description: Lightweight and smoother than plywood.
Commonly used as underlayment and for skinning in theater.
Thickness options: 1/8” and 1/4”.
Oriented Strand Board (OSB)
Description: Made from recycled wood strands, denser than plywood but may splinter.
Eco-friendly and typically available in 4’ by 8’ sheets.
Surface may not be flawless when painted.
Lumber
Types:
1x: Refers to sticks of lumber, e.g., 1x6 indicates a width of 6 inches.
Note: Actual lengths are shorter than labeled dimensions.
2x: Generally refers to studs.
Extruded Polystyrene Foam (XPS Foam/Pink Foam)
Description: Layered foam that can be carved.
Thickness options: 2”, 1”, and 1/2”.
Caution: Emits hazardous gases when melted.
Expanded Polystyrene Foam
Description: Commonly used in packaging and can be carved with a blade.
MDF and Hardboard (Masonite)
Description: Made from sawdust and resin, used in stage flooring and custom molding.
MDF: Medium Density Fiberboard.
Moulding
Description: Decorative strips used to transition between surfaces.
Can be made from wood, PVC, or foam.
Polyvinyl Chloride (PVC) Pipes
Description: Used for plumbing, can be heated and bent.
Available in various diameters and cut with saws or pipe cutters.
Cuts
Grain
Description: The longitudinal arrangement of wood fibers.
Patterns may be straight, swirly, or squiggly.
Cross Cut
Description: Cut made perpendicular to the grain.
Tools: Miter saws, circular saws, jigsaws; table saws may use a sled for stability.
Rip Cut
Description: Cut made parallel to the grain.
Tools: Table saws, circular saws, and band saws.
Mitres & Bevels
Miter Cut: Angle change in a cut, adjusted at the front of the saw.
Bevel Cut: Changes the vertical angle of the cut.
Drills
Drills
Function: Used to create holes in various materials.
Design: Typically longer in length.
Impacts
Function: Used primarily to drive screws into materials.
Design: Shorter, often featuring a magnet at the back.

(Parts of the Stage)
Ancient Theatre
Raked Stages
Raked: Stages sloped towards the audience.
Upstage: Higher elevation, furthest from the audience (back of the stage).
Downstage: Closer to ground level, nearest to the audience (front of the stage).
Stage Directions
<aside> **Stage directions** are always from the perspective of the actor *facing* the audience. </aside>


Stage Curtains
Grand Valance: Curtain that stretches across the top of the stage.
Grand Drape: Curtains that open and close the stage.


Additional Curtains
Borders: Hang above the stage to hide lighting and sound equipment; also called teasers.
Cyc: White fabric in the background, often used for projection.
Stage Configurations


Traverse Stage: Audience sits on two sides; also known as an alley stage.
<aside> The **booth** is always closest to *downstage*. </aside>

--- AP HUMAN GEOGRAPHY ---
(FRQ Help)
ALWAYS define terms!

Identify…

Provide answer
Do not waste time on extra details.
Define…

Write definition
Give an example
Explain the example
Describe…

Provide characteristics
Make connections
Use details
Explain details
Explain…

Answer the question
Define all terms
Cite geographic example
Explain example
Explain to the Extent/Degree of…

Name a degree
Answer question
Explain degree
Assumptions/limitations of a model
Assumptions → models usually assume perfect conditions

Limitations → limits of the model in explaining a pattern

Compare…

At least 3 differences
Explain both sides
Explain each difference

(Unit 1: Thinking Geographically)
Unit Overview

Geography provides a unique perspective on the interaction between humans and the physical environment.

Spatial → related to space

Spatial Patterns: how and where different geographic features occur on the Earth’s surface
Branches of Geography

Physical Geography: study of the spatial characteristics of various elements of the physical environment
Human Geography: study of the spatial characteristics of humans and human activities, including population, culture, politics, urban areas, and economics, as well as landforms, water bodies, climate, ecosystems, and erosion.
The Four-Level Analysis Spatial Framework

This framework guides thinking and helps to think like a geographer.

Level	Key Questions
Comprehension (1)	What? Where? When? Scale? Source?
Identification (2)	Patterns?
Explanation (3)	Why? How?
Prediction (4)	Impact? Future Implications?
The Geo-Inquiry Process

ASK — explore and understand an issue
COLLECT — collect data needed to answer the question
VISUALIZE — display data in maps or other visual forms to make complex data easier to understand and reveal connections and patterns
CREATE — communicate your findings to your audience
ACT — take action based on those findings
Essential Geography Skills

Concepts and Processes

Analyzing geographic theories, concepts, processes, or models in both theoretical and applied contexts.
Analyze: to break down into parts and study each part carefully.

Analysis: thinking about data and drawing conclusions.
Theory: a system of ideas that explains why or how interactions have occurred.
Concepts: key vocabulary and ideas that geographers use.
Processes: steps or actions that explain geographic patterns.
Models in Geography

Models help geographers see spatial patterns and understand variations.

Spatial Models: stylized maps illustrating theories about distribution.
Nonspatial Models: use words, graphs, or tables to illustrate theories and concepts.
Data-Driven Models: use mathematical formulas to explain how the world works.
Time-Distance Decay: as time or distance increases, a variable reduces (e.g., mail delivery speeds).
Spatial Relationships

Geographers analyze maps for patterns in the location and distribution of phenomena.

Spatial Perspective: where something is located and why.
Ecological Perspective: relationships between living things and their environment.
Spatial Patterns: the general arrangement of things being studied.
Networks: interconnected entities or nodes.
Data Analysis

Analyzing quantitative geographic data represented in various forms, including maps, tables, and graphs.

Quantitative Data: measurable information (e.g., total number of immigrants).
Geospatial Data: quantitative data with a geographic location, often analyzed using geographic information systems.
Source Analysis

Analyzing qualitative geographic information represented in maps, images, and landscapes.

Qualitative Sources: descriptions (interviews, photographs) not represented as numbers.

Using the Four-Level Analysis for Sources

Level	Descriptions
Comprehension (1)	Information within the source
Identification (2)	Patterns within the source
Explanation (3)	How geographic concepts explain the patterns
Prediction (4)	Possible impacts of the patterns
The Census

The census is an official count of people in a defined area, conducted by the U.S. Census Bureau annually.

Scale Analysis

Scales of Analysis involve different views (local, regional, global) to understand topics.

1.1 — Introduction to Maps

Maps are essential tools for geographers, used for thousands of years.

Cartographers: creators of maps.

Maps

Organize complex information and communicate spatial information effectively.
Reference Maps: designed for general information about places.

Political Maps: show human-created boundaries.
Physical Maps: show natural features.
Road Maps: show highways and streets.
Plat Maps: show property lines.
Thematic Maps: show spatial aspects of information or phenomena.

Choropleth Maps: use colors to show spatial data distribution.
Dot Distribution Maps: show specific locations and distributions.
Graduated Symbol Maps: use symbols of different sizes for different amounts.
Isoline Maps: connect points of equal value.
Cartograms: compare statistics by altering sizes.
Scale

A map is a reduction of the actual land it represents.

Scale: the ratio between the size of things in the real world and the area it represents.

Map Scale: the mathematical relationship between the size of a map and what it shows.

Regions

A region is an area with distinct characteristics.

Formal Region: an area with shared traits.
Functional Region: organized by its function around a focal point.
Perceptual Region: reflects feelings about a place.
Representation of Spatial Patterns

Location

Absolute Location: precise spot based on a system (latitude and longitude).
Relative Location: description of where something is in relation to something else.
Place: a location distinguished by physical and human characteristics, changing over time.

Mental Maps: internalized representations of Earth’s surface.

Site vs. Situation

Site: characteristics of an immediate location.
Situation: location in relation to surroundings.
Patterns

Geographers consider the arrangement of things.

Space: area between things on Earth.
Density: number of things in a specific area.
Pattern: arrangement in a space.
Flow: movement of people, goods, and information.
Distance

Absolute Distance: definite measure (e.g., miles).
Relative Distance: based on time or money.
Elevation

Elevation is the distance of features above sea level, impacting climate and agriculture.

Pattern Distribution

Distribution describes how a phenomenon is spread out.

Common Distribution Patterns:

Clustered: arranged in a concentrated area.
Linear: arranged in a straight line.
Dispersed: spread over a large area.
Circular: evenly spaced from a central point.
Geometric: in a regular arrangement.
Random: having no order.
Projections

All maps distort some aspect of reality since the Earth is a sphere.

Comparing Map Projections

Projection	Purpose	Strengths	Distortion (Weakness)
Mercator	Navigation	Accurate directions	Distorts size near poles
Peters (Gall—Peters)	Area distributions	Accurate sizes	Inaccurate shapes
Conic (Lambert, Albers)	General use	Close size and shape	Non-constant direction
Robinson	General use	Minimal distortion	Slight distortion in area, shape, size, direction
Azimuthal	Point-to-point	Preserves direction	Distorts shape and area, shows half of Earth
The Robinson projection is preferred for minimal distortion.

1.2 — Geographic Data
Geographers call this era the geospatial revolution due to advances in data gathering through technical mapping and aerial photography. They gather data via fieldwork, interviews, and observations.

Landscape Analysis
Landscape Analysis involves defining and describing landscapes through:

Careful Observation

Geographers collect data via Field Observation, which includes visiting locations and recording information.
Spatial Data refers to information tied to specific locations, gathered through:
Remote Sensing: data collection from satellites.
Aerial Photography: images taken from planes.
Ground-level photography, sound recordings, and chemical analyses.
Interpretation of Data

This step involves integrating data and answering geographic questions.
Geospatial Data
Geospatial data can be either quantitative or qualitative.

Who Collects Geographic Data?
Individuals: Through field observations and narratives.
Organizations: Businesses and government agencies often have more resources for data collection.
Governments: Collect data through various policies and initiatives.
Geographers perform fieldwork to gather geospatial data.

1.3 — The Power of Geographic Data
Data drives decision making and can have positive benefits when used ethically. However, misuse leads to inaccuracies.

Geovisualizations are interactive maps created from collected data, helping to enhance understanding.

All data has limitations, necessitating careful collection and interpretation.

Geospatial Technologies
TYPE	DESCRIPTION	USES
Global Positioning System (GPS)	Uses satellites to determine exact locations	Navigation, mapping
Remote Sensing	Collects digital images from aircraft or satellites	Land cover assessment, weather monitoring
Geographic Information Systems (GIS)	Analyzes and displays multiple digital maps	Crime data analysis, pollution monitoring
Smartphone and Computer Applications	Location-aware apps using device data	Recommendations, mapping
Topography
Topography refers to the land's shape and features, often displayed using GIS.

Solutions in Action
Geographers use geospatial technologies to address real-world problems, particularly in humanitarian contexts. Community-based solutions that involve local residents tend to be more effective.

1.4 — Spatial Concepts
The Spatial Approach examines the arrangement of phenomena across Earth's surface, encompassing concepts like location, distance, direction, and flow.

Major Spatial Concepts
Location
Identifies where phenomena are using toponyms, which can reveal insights but may be misleading.
Place
Involves the human and physical characteristics of a location.
Distance & Time
Time-Space Compression describes the reduction in relative distance due to advances in transportation and communication.

Spatial Interaction refers to the movement and flow of people, goods, and information.

Friction of Distance indicates that as distance increases, connectivity decreases.

Patterns & Distribution
Spatial Association highlights relationships between patterns of distribution, indicating that multiple phenomena can be interrelated.

1.5 — Human-Environmental Interaction
This concept examines the connections between humans and the natural world.

Human-Environmental Interaction Concepts
Natural Resources
Natural resources can be classified into:

Renewable: Resources that replenish naturally (e.g., air, water).
Non-Renewable: Resources that can be depleted (e.g., fossil fuels).
Sustainability
Sustainability aims to use resources responsibly to ensure future availability, considering the renewable or non-renewable nature of those resources.

Theories of Human-Environmental Interaction
Cultural Ecology studies human adaptation to the environment.
Environmental Determinism suggests that the environment shapes human behavior (now largely discredited).
Possibilism emphasizes human agency in response to environmental challenges.
1.6 — Scales of Analysis
Geographers analyze phenomena at various scales, referred to as levels of generalization.

Geographic Scale indicates the area of study.

SCALE	AREA SHOWN
Global	Entire world
World Regional	Multiple countries
National	One country
National-Regional	Portions of a country
Local	Cities, counties, or neighborhoods
Data Aggregation
Aggregation organizes data into different scales for easier mapping and analysis. Patterns can vary based on the scale, necessitating careful consideration to avoid false conclusions.

1.7 — Regional Analysis
Regions have boundaries, characteristics, and are human constructs.

Formal Regions
Also known as uniform regions, they are defined by shared traits (political, physical, cultural).

Functional Regions
Also called nodal regions, they are defined by networks of interaction centered around a focal point.

Perceptual Regions
Also known as vernacular regions, these are defined by emotional connections to places.

Regions can be further divided into subregions, which can be classified into national, subnational, and local regions. While regions help organize geographic understanding, they can also lead to generalized perceptions and territorial conflicts.

Contested Boundaries refer to disputed regions.

(Unit 2: Population & Migration Patterns)
2.1 — Population Distribution

Population density has increased significantly, but not distribution.

Growth in settled areas
Where People Live

People want to live in places with relative ease and comfort.

Suitable land stays the same while population increases
Population Distribution: the pattern of human settlement (the spread of people across the Earth)

Population Density: a measure of the average population per area (how crowded a place is)

Physical Factors Influencing Population Distribution

Early humans settled around areas with food, water, and shelter

Midlatitudes: the regions between 30° and 60° North and South of the equator

More moderate climates
Better soil
Low-Lying Areas → better soil, better for crops

Close to oceans → facilitates transportation, provides food, creates moderate temperatures (warmer during winter and colder during summer)
Most people live near water bodies.

Fresh water for drinking
Irrigation, transportation, and food
Climate: long-term patterns of weather in an area

Greatly affects population distribution in direct and indirect ways
Represents overall measures of conditions
Climate shapes the soil, vegetation, and agricultural opportunities of an area.

Temperate Climates: moderate climates

Usually suitable conditions
Landforms: the natural features on the Earth’s surface

Influence population distribution
Human Factors Influencing Population Distribution

Humans originally focused on attractive places.

Now, humans focus on other human populations.
Scale of Analysis & Physical Factors

Certain factors are relevant at different scales of analysis.

Climate variation is different
Scale of Analysis & Human Factors

Government can affect population distribution.

Social Stratification: the hierarchical division of people into groups based on factors such as economic status, power, or ethnicity

Most commonly based on wealth
Population Density

Area’s population in comparison to its size
Arithmetic Population Density

Arithmetic Population Density → calculated by dividing a region’s population by its total area

Doesn’t indicate specifics areas where the population is distributed
Doesn’t show specific patterns
Physiological Population Density

Physiological Population Density → calculated by dividing population by arable land

Arable Land: land suitable for growing crops
Better measure of a region’s carrying capacity
Carrying Capacity: the population a region can support without significant environmental deterioration

Agricultural Population Density

Agricultural Population Density → compares the number of farmers to arable land

Shows efficiency of the region’s farmers
Developed countries have lower agricultural population densities.

Farmers can produce more food with less workers
Subsistence Agriculture: the practice of providing crops and livestock for a community’s own survival

Population Density & Time

Density can very by time of year (ex. warmer states can increase in population during winter months)

2.2 — Consequences of Population Distribution

Densely-Settled → areas with high population densities

Sparsely-Settled → areas with low population densities

Implications of Distribution and Density

Distribution reflects the choices of people and their values.

Economic, Political & Social Processes

Most economic decisions are based on population distribution.

Businesses make more profit when near more customers
Manufacturing plants need more workers in the area
Political boundaries are changed every year for an average number of voters per district.

State legislatures need to make districts of relatively-similar sizes
Redistricting: adjustments to boundaries

Smaller urban districts and larger rural districts
Services & facilities are located closer to more people.

Act as nodes of functional regions
Infrastructure & Urban Services

Infrastructure: the facilities and structures that allow people to carry out their typical activities

More population = More demands on infrastructure
More popular regions (better infrastructure) have higher population densities

Services in high-density areas is most cost-effective (more people served for less cost)
Diseases and contamination can spread easily with more population density.

The Environment & Natural Resources

Overpopulation: having more people than it can support

Dependent on population distribution & density
More population = More environmental strain

Resources are depleted
Less pure water (infected from sewers and industrial waste)
Better resources in an area = More people can be supported

Technological changes can INCREASE the carrying capacity of a region.

Climate can be a positive or negative factor on carrying capacity
Cities are generally built on land with the best carrying capacity.

2.3 — Population Composition

Population Composition

Age and Gender

Some countries have an older or younger overall population.

Differences in population can shape policies.

Population Pyramids

Age-Sex Composition Graph / Population Pyramid: a graph that provides information on a population with axes of age and gender

Reading Population Pyramids

Cohorts: the groups in the vertical age groups

Usually in the middle
Male → left, female → right

Population pyramids are most common at the national scale.

Population Pyramid Structure

Growing Population → wide base, tapers upward (larger % of children compared to adults)

Common Patterns in Population Pyramids

Symmetrical → balance of males & females

Females typically live longer than males (typically asymmetrical)
The Impacts of War

War leads to more deaths

18-40 → military deaths
Other civilian deaths can impact population
Families are delayed because men are away from women.

Birth Deficit: slowdown of births
Baby Booms, Busts & Echoes

Baby Boom: a spike in the birth rate

Typically after hostilities end (end of wars)
Baby Bust: a lowering in birth rates once the boom ends

Echo: an increase in birth rate following a baby bust

Migration and Other Anomalies

PYRAMID FEATURES	POSSIBLE REASONS FOR ANOMALY
Bars are longer for ages 18-25 than younger or older	Small city with a large university; Shortage of school funding so families move away when they have children
Bars are longer for ages 25-50 than children	Economic crisis causes people to have less children; Government antinatalist policies; Epidemic causing infants to die
Bars are longer for ages 26→	Warm climates attract retirees; Lack of jobs causes younger people to move
Bars are longer for males	Jobs traditionally done by men have a boom; Military bases with more men
Bars are longer for females	Large assisted-living homes
2.4 — Population Dynamics

Population grew slowly until the 19th century.

Advancements in technology and medical care bring about more population
People become more efficient at extracting energy from the environment.

Measuring the Number of Births

Crude Birth Rate (CBR): the number of live births per year for each 1,000 people

Total Fertility Rate (TFR) → only focuses on women of childbearing age (15-49)
In most countries, the TFR has decreased over time.

Rate of Natural Increase (RNI): the difference between the crude birth rate and crude death rate of a defined group of people

Shows trends
Doubling Time (DT): the number of years in which a population growing at a certain rate will double

70 ÷ rate of natural increase
Urbanization: the growth and development of cities

Technology motivates people to move from farms to cities
Life Expectancy

Even though TFR decreases, the death rate also decreases and life expectancy increases. (Results in population increase)

Global Population Increase

Life Expectancy: the average number of years people live

Greatly improved in the last century
Infant Mortality Rate (IMR): the number of children who die before their first birthday

Decreased in the last century which brings up life expectancy
Food Production & Nutrition

Advances in agriculture helped to increase life expectancy through:

Mechanized food production
Improved farming techniques
More efficient product transportation
Advances in agriculture led to:

Greater farming efficiency
Improved global food security
Decrease farm family size
Decrease of small towns
Public Sanitation

Large concentrated populations led to the spread of disease.

Sewer systems → protected water supplies from contamination
Boiling water → prevented transmission of waterborne illnesses
Water treatment plants → transported clean water to urban homes
Healthcare

Vaccines → preventive measures against diseases

Antibiotics → cured people with bacterial infections

2.5 — The Demographic Transition Model

Population size over time → represented in models

Demographic Transition Model (DTM) → depicts five typical stages of population change that countries experience

FACTOR	1. HIGH STATIONARY	2. EARLY EXPANDING	3. LATE EXPANDING	4. LOW STATIONARY	5. DECLINING
BIRTH RATE	High (fluctuates)	High (fluctuates)	Declining with urbanization	Low with stable population	Falls below death rate
DEATH RATE	High (fluctuates)	Rapidly declining	Declining but not as fast	Low and stable	Low and may increase
NATURAL INCREASE	0 → 0.5%	0.5 → 4%	4 → 0.8%	0.8 → 0%	0 → -1%
POPULATION CHANGE	Low growth	Rapid growth	Rapid but slowing growth	Low growth	Low decline
POPULATION STRUCTURE	Very young	Very young	Young (rising life expectancy)	Balanced (more aging)	Very old
MODERN EXAMPLES	- Scattered isolated groups	- Mali - South Sudan	- Mexico - Turkey - Indonesia	- United States - China	- Japan - Germany
ECONOMY & SOCIETY	- Subsistence agriculture - Hunter-gathering	- Rural agricultural society - Less developed	- Urbanized - Emerging economies	- Urbanized service economy - Highly developed - Rising gender equity	- Urbanized service economy - Highly developed
Demographic Transition & Population Pyramids

The Epidemiological Transition Model is an extension of the demographic transition model that explains the changes in death rates and the common causes of death over time. It doesn't consider lifestyle choices or local environmental factors affecting life expectancy.

Here's a summary of the stages:

Disease and Famine: Characterized by high death rates due to infectious diseases, accidents, human conflict, and food insecurity, leading to low life expectancy.

Receding Pandemics: Improvement in healthcare reduces pandemics, decreasing death rates and increasing life expectancy.

Degenerative and Human-Created Diseases: The rise of aging-related diseases stabilizes death rates while life expectancy continues to increase.

Delayed Degenerative Diseases: Advances in medical procedures allow for the delay of diseases associated with aging, resulting in the lowest death rates and peak life expectancy.

Reemergence of Infectious and Parasitic Diseases: The resurgence of these diseases due to factors like pathogen resistance causes a decline in life expectancy.

Malthusian Theory, proposed by Thomas Malthus, posits that population growth will outpace food production, leading to overpopulation and potential famine or starvation. He suggested that conflicts over resources could arise from this imbalance.

Ester Boserup countered Malthusian ideas by asserting that a growing population could lead to increased agricultural work and innovation.

Neo-Malthusians still adhere to these principles, highlighting the use of non-renewable resources.

Population policies can be categorized into antinatalist and pronatalist. Antinatalist policies aim to reduce birth rates, often seen in developing countries (e.g., China's "later, longer, fewer" policy). Pronatalist policies, on the other hand, encourage higher birth rates, with benefits like paid maternity leave and childcare support.

Women’s roles in society have evolved, impacting fertility rates. Increased education and family planning methods contribute to declining population growth. Political factors also influence demographic changes, giving women more agency over reproductive decisions.

Aging populations are a global trend, influenced by longer life expectancy and lower birth rates. This shift has significant political, social, economic, and environmental implications, including increased healthcare costs and changes in the dependency ratio.

Migration refers to the permanent or semi-permanent relocation of people. It can be voluntary (driven by push and pull factors) or forced (due to conflict or persecution). Factors influencing migration include economic opportunities, social conditions, political stability, and environmental changes.

Ravenstein's Laws of Migration outline patterns such as shorter distances traveled by most migrants and a tendency to settle in urban areas.

Different types of migration include step migration, rural-to-urban migration, and transnational migration, where immigrants maintain ties to their country of origin.

The effects of migration are multifaceted, benefiting sending countries through remittances while potentially causing brain drain. Receiving countries may experience cultural enrichment but also face challenges such as discrimination and conflict.

Policies regarding migration can either encourage or discourage it, with consequences for both sending and receiving nations.

(Unit 3: Cultural Patterns & Processes)
3.1 — Introduction to Culture
Culture is essential to society and encompasses all learned behaviors, beliefs, and objects. It manifests both visibly through actions and possessions and invisibly through shared beliefs and traditions.

Cultural Traits: Elements that define a culture (both visible and invisible).
Cultural Complex: A network of interrelated cultural traits.
Cultural Artifact: Physical representations of cultural values and beliefs.
Origins of Culture
Culture Hearth: The origin area of a unique culture or trait.

Diffusion: The spread of culture from its hearth.
Taboos: Strongly discouraged behaviors in a culture.
Types of Cultures
Traditional Culture: Dynamic systems defining ethnic groups, incorporating traditional, folk, and indigenous cultures.
Folk Culture: Practices of small, homogeneous groups, often rural and slow to change.
Indigenous Culture: Ethnic groups residing in ancestral lands with unique traits.
Globalization and Popular Culture
Globalization has intensified cultural mixing.

Popular Culture: Traits that spread widely, influenced by globalization.
Cultural Landscape: The modified environment reflecting cultural values.
Traditional vs. Popular Culture
Cultural Norms: Standards that guide behavior in a group.

Traditional Culture	Popular Culture
Society	Rural, homogeneous	Urban, diverse
Social Structure	Community-focused	Individualistic
Diffusion	Slow, relocation-based	Rapid, mass media-driven
Architecture	Local materials	Varied styles, often global
Food	Locally-produced	Imported, wide choices
Artifacts, Mentifacts & Sociofacts
Artifacts: Material culture (e.g., tools, clothing).
Mentifacts: Nonmaterial culture (e.g., beliefs, values).
Sociofacts: Social organization and relationships.
Families
Families form the foundation of societies, differing in structure (nuclear vs. extended).

3.2 — Cultural Landscapes
Cultural Landscape: The human imprint on the environment.

Sense of Place: Emotional connections to locations.
Placemaking: Community efforts to adapt spaces for human needs.
Styles of Architecture
Traditional Architecture: Reflects local history and materials.
Postmodern & Contemporary Architecture: Diverse styles, often using modern materials.
Ethnic Enclaves
Ethnic Enclaves: Concentrated areas where cultural groups maintain distinct identities.

Gender and Cultural Landscapes
Gendered Spaces: Locations designated for specific genders, reflecting societal norms and identities.

Gentrification: Renovations that may displace vulnerable communities.
Cultural Regions
Cultural Regions: Defined by shared characteristics like language and religion.
Culture Realms: Larger areas encompassing multiple cultural regions.
Religion and the Landscape
Sacred Spaces: Locations with religious significance.

Language and Identity
Dialects: Variations of standard languages reflecting local culture.

How Religion & Ethnicity Shape Spaces
Charter Group: The initial cultural and religious group in an area.

New Cultural Influences
Sequent Occupancy: The layers of cultural imprints from different groups over time.

3.3 — Cultural Patterns
Cultural Patterns: Related traits and complexes influencing behavior.

Religious Patterns & Distribution
Different religions exhibit distinct regional patterns in the U.S.
Centripetal & Centrifugal Forces
Centripetal Forces: Unifying factors (common language, religion).
Centrifugal Forces: Divisive factors (ethnic conflict).
Religion’s Impact
Religion influences laws, customs, and the distribution of adherents.

Subdivisions of Religions
Branches, Denominations, and Sects: Organizational structures within religions.

Cultural Ethnocentrism & Relativism
Ethnocentrism: Belief in cultural superiority.
Cultural Relativism: Understanding beliefs from others' perspectives.
Acculturation and Assimilation
Acculturation: Adoption of traits from another culture while retaining distinctiveness.
Assimilation: Full adoption of another culture’s customs.
3.4 — Types of Diffusion
Types of Diffusion
Diffusion: The spread of cultural elements from one area to others.

Relocation Diffusion
Relocation Diffusion: Spread via migration (e.g., Italian pizza in the U.S.).
Expansion Diffusion
Contagious Diffusion: Spread through direct contact.
Hierarchical Diffusion: Spread from influential centers.
Stimulus Diffusion: Adaptation of ideas while retaining core concepts.
3.5 — Historical Causes of Diffusion
Influences of Colonialism, Imperialism, and Trade
Colonialism and imperialism have significantly affected language and religion diffusion.

Diffusion of Languages
Languages spread through various forms of diffusion, notably through colonization.

English as a Lingua Franca
English serves as a global common language due to historical and economic factors.

Creating New Words and Languages
Slang, Pidgin, and Creole Languages: Reflect dynamic language evolution.

3.6 — Contemporary Causes of Diffusion
Social Constructs: New ideas emerging from social groups, influencing culture.

Communication Technologies
Advancements in communication technology accelerate cultural diffusion.

Cultural Convergence and Divergence
Increased interaction leads to cultural convergence (similarity) or divergence (change).

(Unit 7: Industralization and Economic Development)
7.3 — Measures of Development
Economic development is significantly influenced by business decisions.

Measures of Development
Gross National Product (GNP) & Gross National Income (GNI): These metrics represent the total dollar value of all goods and services produced by a country's citizens within a year, including those generated abroad by citizens.

Reflects income generated by citizens, irrespective of their location.
Gross Domestic Product (GDP): This measures the total dollar value of all final goods and services produced within a country in one year.

Focuses on geographic production; includes income from foreign citizens working within the nation.
Useful Statistics
For easier comparisons, figures are usually converted to dollars.

Per Capita: This term refers to the amount calculated per person (e.g., GDP per capita).
Purchasing Power Parity (PPP): This adjusts for price level differences across countries, offering a clearer comparison of living standards.

<aside> Higher GDP, GNI, or GNP → Indicates more development. </aside>
Terms of Development
System	Low End	Middle Range	High End
Economic Level (GDP/capita)	Low income	Middle income	High income
Economic Development	Developing economies	Emerging economies	Advanced economies
Level of Industrialization	Non-industrialized	Newly Industrialized Country (NIC)	Postindustrial Country
Human Development Index	Low HDI	Medium HDI	High / Very High HDI
World Systems Index	Periphery	Semi-periphery	Core
Stages of Economic Growth	Stage 1 (Traditional) / 2 (Pre-condition for take-off)	Stage 3 (Take-off)	Stage 4 (Drive to maturity) / 5 (High mass consumption)
Income Classification	Low income	Lower-middle income / Higher-middle income	High income
Sectoral Structure of the Economy
<aside> Less development → Higher % of labor in the primary sector.<br> More development → Higher % of labor in the tertiary sector. </aside>
Formal Sector: This part of the economy is regulated by the government, following laws and tax obligations.

Informal Sector: Also known as the underground or shadow economy, this comprises unregulated activities.

Income Distribution
Gini Coefficient/Index: This index measures income distribution within a population.

A higher number (ranging from 0 to 1) indicates greater inequality (0 means equal income; 1 means one person holds all income).
Spatial Patterns of Economic Development
Africa & South America: Growing economies, lower average incomes, higher populations, and less GDP.
Asia: Significant income gains, higher population, and higher GDP.
North America & Europe: Medium populations with the highest GDP and wealth.
<aside> Within countries, development can vary regionally. </aside>
Social Measures of Development
<aside> Relying on multiple statistics enhances accuracy. </aside>
Key social indicators include:

Total Fertility Rate (TFR): Higher TFRs typically indicate lower development.
Infant Mortality Rate (IMR): Higher IMRs signal lower development.
Life Expectancy: Higher life expectancy correlates with greater development.
Literacy Rate: Lower literacy rates are associated with less development.
The Gender Gap
Gender Gap: Refers to the disparity in privileges between males and females in society.

Varies widely across regions.
Gender Inequality Index (GII): This composite measure assesses gender disparity based on factors like reproductive health, empowerment, and labor participation.

The Human Development Index (HDI)
Human Development Index (HDI): Combines GDP per capita, life expectancy, expected years of education, and average years of education (scored from 0 to 1).

Higher HDI values indicate greater development.
7.4 — Women & Economic Development
Barriers to Gender Equality
<aside> Urban areas generally exhibit **higher** gender equity compared to rural areas. </aside>
Challenges to gender equality include:

Cultural barriers.
Limited educational opportunities.
Restricted access to financial resources.
The Glass Ceiling
Women face significant challenges in attaining upper-level positions, especially in developing countries.

The Glass Ceiling represents barriers preventing women from reaching higher management roles.
<aside> Women must overcome cultural perceptions that hinder their leadership potential. </aside>
Increased Opportunities for Women
Transnational Corporations (TNCs)
Transnational Corporations: These companies operate across multiple nations, expanding job opportunities for women, particularly as birth rates decline.

NGOs and Microloans
Non-Governmental Organizations (NGOs): These entities work to empower women, facilitating employment beyond traditional roles.

Microcredit/Microfinance Programs: Provide small loans to women for starting or expanding businesses, boosting financial independence and decision-making power.

Lead to better child welfare, lower birth rates, and improved nutrition.
<aside> The UN set goals in 2015 to promote sustainable development aimed at improving women's lives. </aside>
7.5 — Theories of Development
Rostow’s Stages of Economic Growth
Walt W. Rostow proposed the modernization theory, outlining a five-stage process of development from traditional to modern society.

Factor	Characteristics	Examples
1. Traditional Society	Relies on primary sector; limited tech and mobility.	17th century North American colonies.
2. Preconditions for Take-off	Enhanced infrastructure and technology; increased trade.	Nigeria, Afghanistan.
3. Take-off	Major technological innovations; self-sustaining growth.	Bangladesh.
4. Drive to Maturity	Diverse industries; growth surpasses political development.	Brazil.
5. High Mass Consumption	Increased consumption of non-essentials; strong tertiary sector.	United States, Japan.
Criticisms of Rostow’s Model
Limited Examples: Primarily focused on the US and Europe, failing to represent diverse global contexts.
Exploitation: Overlooked how poorer nations depend on wealthier ones.
Progress Bias: Implied a linear path toward development.
Sustainability Concerns: Did not consider environmental limitations.
Interaction Overlooked: Neglected the interconnectedness of countries.
Wallerstein’s World Systems Theory
Immanuel Wallerstein's World Systems Theory: Suggests countries exist within a global system where they are economically interdependent.

Factor	Characteristics	Labor Trends	Examples
Core	Economically dominant; focuses on high-skill production.	Tertiary/quaternary/quinary sector workers.	United States, UK, Japan.
Semi-Periphery	Middle-income nations providing goods to core countries.	Secondary/tertiary sector workers.	China, Mexico, Brazil.
Periphery	Least-developed; labor-intensive production.	Primary sector workers.	Afghanistan, Bolivia, Kenya.
Criticisms of World Systems Theory
Cultural Emphasis Lacking: Focused predominantly on economics, ignoring cultural factors.
Postindustrial Oversight: Did not account for shifts to postindustrial economies.
Limited Application: Did not provide clear pathways for countries to change status.
Narrow Focus: Concentrated too much on countries and corporations, sidelining other factors.
Commodity Dependence
Commodity Dependence: Occurs when over 60% of a country’s exports consist of raw materials, often linked to lower economic development.

<aside> Commodity-dependent nations are particularly vulnerable to price fluctuations. </aside>

--- ENGLISH 1 ---
(The Odyssey)
Summary of The Odyssey by Emily Wilson
Introduction
Emily Wilson introduces her translation of The Odyssey, aiming to create a version that is both faithful to Homer’s original text and accessible to modern readers. She emphasizes the poem's historical significance, prime themes like heroism and identity, and its complex narrative structure. Wilson explains her translation choices, balancing fidelity to ancient Greek with engaging language, while preserving the poem's rhythm and dynamism.

Book 1: The Boy and the Goddess
The epic begins with an invocation to the Muse, recounting how Odysseus is held captive by the nymph Calypso on the island of Ogygia. In Ithaca, suitors besiege his home, seeking his wife Penelope. Athena convinces Zeus to allow Odysseus to return home, disguising herself as Mentes to guide his son, Telemachus. She urges him to seek news of his father, prompting Telemachus to assert himself against the suitors.

Book 2: A Dangerous Journey
Telemachus, inspired by Athena, calls an assembly to denounce the suitors but faces mockery. The soothsayer Halitherses predicts Odysseus’s return, dismissed by the suitors. Encouraged by Athena, Telemachus secretly prepares for his voyage to Pylos to seek news about Odysseus.

Book 3: An Old King Remembers
In Pylos, Telemachus meets Nestor, who warmly welcomes him but has no news of Odysseus. Nestor advises him to visit Menelaus in Sparta for more information, sending his son Pisistratus to accompany Telemachus, marking Telemachus’s growth.

Book 4: What the Sea God Said
Telemachus and Pisistratus arrive in Sparta, where Menelaus and Helen welcome them. Menelaus shares news of Odysseus, revealing that he is alive on Calypso’s island. Back in Ithaca, the suitors plot against Telemachus, but Penelope remains hopeful.

Book 5: From the Goddess to the Storm
Zeus sends Hermes to free Odysseus from Calypso. She reluctantly aids him, but Poseidon conjures a storm that wrecks Odysseus’s raft. Ino, a sea goddess, helps him survive, and he reaches the island of Scheria, collapsing under an olive tree.

Book 6: A Princess and her Laundry
Athena visits Nausicaa in a dream, urging her to wash clothes by the river. There, she meets Odysseus and, impressed by him, provides clothing and guides him to her parents, King Alcinous and Queen Arete.

Book 7: A Magical Kingdom
Disguised as a young girl, Odysseus arrives at Alcinous’s palace. He recounts his plight without revealing his identity, and the royal family offers their assistance for his return to Ithaca.

Book 8: The Songs of a Poet
King Alcinous convenes an assembly to discuss Odysseus's journey. A bard sings of the Trojan War, evoking Odysseus's emotions. He participates in athletic contests, showcasing his prowess, before sharing stories of his adventures.

Book 9: A Pirate in a Shepherd’s Cave
Odysseus begins recounting his adventures, starting with the land of the Lotus-Eaters, where his men are seduced by lotus fruit. He then narrates the encounter with the Cyclops Polyphemus, whom he blinds to escape.

Book 10: The Winds and the Witch
Odysseus arrives at Aeolus's island, where he receives a bag of winds. His crew opens it, blowing them off course. They then encounter the cannibalistic Laestrygonians and the sorceress Circe, who transforms his men into pigs. With Hermes's help, Odysseus resists her magic and stays with her for a year.

Book 11: The Dead
Odysseus travels to the Underworld to consult Tiresias. He learns about the dangers ahead, including the Sirens and Scylla and Charybdis. He encounters spirits, including his mother and fallen comrades, gaining crucial insights for his journey.

Book 12: Difficult Choices
After burying Elpenor, Odysseus prepares for upcoming dangers. He successfully navigates past the Sirens by plugging his men's ears and ties himself to the mast. They encounter Scylla and Charybdis, losing six men. Despite warnings, his crew slaughters Helios’s sacred cattle, leading to their destruction by a storm.

Book 13: Two Tricksters
The Phaeacians help Odysseus return to Ithaca, but Poseidon punishes them for aiding him. Odysseus awakens, confused, and Athena disguises him as a beggar for protection.

Book 14: A Loyal Slave
Odysseus, still in disguise, finds his loyal swineherd, Eumaeus, who offers him hospitality. Eumaeus expresses his longing for Odysseus's return, showcasing loyalty amidst chaos.

Book 15: The Prince Returns
Athena urges Telemachus to return to Ithaca, warning him of the suitors' plans. He sails home, while Odysseus and Eumaeus deepen their bond. Telemachus arrives safely, setting the stage for reunion with his father.

Book 16: Father and Son
Telemachus reunites with Eumaeus and is later revealed to Odysseus. They plot their strategy against the suitors. Meanwhile, Penelope remains hopeful despite the suitors' continued threats.

Book 17: Insults and Abuse
Telemachus returns to the palace and reunites with Penelope. Odysseus, as a beggar, faces abuse from the suitors. His old dog Argos recognizes him and dies content, highlighting the loyalty within his household.

Book 18: Two Beggars
A new beggar challenges Odysseus to a fight. He defeats him, gaining respect from some suitors. Tensions rise as Odysseus and Telemachus prepare for the confrontation ahead.

Book 19: The Queen and the Beggar
Odysseus and Telemachus hide weapons in the palace. Odysseus meets Penelope and tells her a fabricated tale, moving her to tears. Eurycleia recognizes Odysseus but is stopped from revealing his identity, heightening the emotional tension.

Book 20: The Last Banquet
Odysseus worries about the upcoming battle. Athena reassures him. Signs from Zeus indicate divine support. The suitors mock Telemachus, unaware of their impending doom.

Book 21: An Archery Contest
Penelope holds a contest to string Odysseus's bow. The suitors fail, while Odysseus, still disguised, succeeds effortlessly, setting the stage for his revenge.

Book 22: Bloodshed
Odysseus reveals his identity and begins his revenge on the suitors, with help from Telemachus and loyal servants. A battle ensues, resulting in the suitors’ deaths and the cleansing of the hall.

Book 23: The Olive Tree Bed
Penelope tests Odysseus’s identity by mentioning their bed. His knowledge confirms his identity, and they reunite, restoring their bond and household.

Book 24: Restless Spirits
Odysseus visits his father, Laertes, leading to an emotional reunion. However, tensions rise with the relatives of the slain suitors. Athena intervenes, establishing peace and restoring order in Ithaca.

(8/19-22/2024 Vocab)
**Diction:** high impact word choices made by an author

**Imagery:** vivid description that specifically involves the five senses

**Connotation:** the subjective associations of a word

- Dependent on perspective and experience, but usually shared by an audience with a similar background

**Mood:** how a piece of writing makes you feel

**Tone:** how a narrator or speaker feels about a specific topic

**Shift:** a change in mood, tone, pace, or structure in a piece of writing

**Metonymy:** the substitution of the name of an attribute or adjunct for that of the thing meant

- **Metonym:** *Nickname for something*
- Ex. native tongue

Ex. *The pen is mightier than the sword.*

- Pen → written word
- Sword → military violence

- https://www.yourdictionary.com/articles/examples-metonymy-meaning-use

**Metaphor:** a figure of speech where a certain idea is applied to an object that it is not literally applicable

- Ex. couch potato

- https://www.yourdictionary.com/articles/examples-metaphor

(Desiderata)
**Lessons from *Desiderata*:**

- Be in peace and silence.
- Be on good terms with everyone.
- Don’t let people overcome you unjustly,
- Listen to others no matter how much you think you shouldn’t.
- Avoid aggressive people.
- Don’t compare yourself with others.
- Enjoy your achievements and goals.
- Keep interested in your career.
- Be cautious for people will try to trick you.
- Life is also full of heroism.
- Be yourself.
- Don’t fake love.
- Don’t be a cynic.
- Use lessons from the past.
- Don’t have inconsequential fears.
- Be gentle with yourself.
- Be happy.

(Levels of Questioning)
Level 1 Questions (L1)

Text-to-Text / Text or Fact-Based Questions

Identify and clarify information in the text (ex. plot details, vocabulary, etc.)
Questions Stems for Text-to-Text / Text or Fact-Based Questions

Who …?
What …?
When …?
Where …?
How …?
What does the author mean by …?
What does the word … mean?
What happened before / after …?
Level 2 Questions (L2)

Interpretive Questions

Explore the meaning behind the language in the text
Questions Stems for Interpretive Questions

Why …?
What does … symbolize in the text?
Why does the author write …?
What is the main idea of …?
What evidence can you present for …?
What caused …?
What effect did … have on …?
Can you predict what will happen after ...?
What can you infer about …?
Evaluative Questions

Develop readers’ judgments and opinions about ideas in the text
Questions Stems for Evaluative Questions

Do you agree with / that …?
What do you think about …?
What is your opinion on …?
What criteria would you use to decide …?
Do you think … or … is more important?
Level 3 Questions (L3)

Text-to-Self Questions

Connect ideas in the text to what is happening in the readers’ lives
Examine experiences from a new perspective
Questions Stems for Text-to-Self Questions

This reminds me of … and makes me wonder …?
I wonder how …?
Would we act differently / the same if …?
In what ways is my life similar / different to …?
What can we learn from …?
How will this change the way we …?
Text-to-World Questions

How the text is significant to the larger society or national and global events / trends
Questions Stems for Text-to-World Questions

How is … significant to …?
How have others historically responded to …?
What does … say about society?
Why is … important to …?
Has society progressed since …?
Hypothetical Questions

Explore different paths and possibilities to extend understanding of the text
Questions Stems for Hypothetical Questions

What if …?
What are the advantages / disadvantages of …?
What would be different if …?
If …, then would …?
Thematic / Speculative / Open-Ended Questions

Identify and clarify information in the text (ex. plot details, vocabulary, etc.)
Questions Stems for Thematic / Speculative / Open-Ended Questions

Depends on the reader

--- ALGEBRA 2 --- 
(Functions)
**Function:** relationship in which each x-value has exactly one y-value.

An example of a function:

```mermaid
graph TD
  -2 --> 4
  -1 --> 3
  0 --> -6
  1 --> 5
  
```

Not an example of a function:

```mermaid
graph TD
  -2 --> 4
  -1 --> 3
  0 --> -6
  1 --> 4
  
```

The **vertical line test** can be used to determine if a relation is a function.

# Set Notation

## Discrete Functions

Ex. Domain: {x | x = 2 or x = 3 or x = 4}

Range: {y | y = 4 or y = 7 or y =3}

## Continuous Data

<aside>
<img src="/icons/activity_gray.svg" alt="/icons/activity_gray.svg" width="40px" /> All real numbers is represented by *x ∈ R*.

</aside>

- Continuous data is represented with inequality symbols.
    - Ex. Domain: {x | 3 < x < 7, x ∈ R}
        
              Range: {y | 5 < y < 3, y ∈ R}
        

# Interval Notation

- Uses parentheses and brackets instead of inequality symbols.

## Continuous Data

If something is equal to, use **[]**. If something is not equal to , use **()**.

- Ex. [5, ∞)

## Discrete Functions

- Ex. Domain: x ∈ {1, 2, 5}
    
          Range: y ∈ {3, 4, 7}

Transformation	Function	Description
Horizontal Shift	f(x + h)	Shift left h units
Horizontal Shift	f(x - h)	Shift right h units
Vertical Shift	f(x) + k	Shift up k units
Vertical Shift	f(x) - k	Shift down k units
Reflection	-f(x)	Reflect across x-axis
Reflection	f(-x)	Reflect across y-axis
Vertical Stretch/Compression	a f(x), a > 1	Stretch vertically by a factor of a
Vertical Stretch/Compression	a f(x), 0 < a < 1	Compress vertically a factor of a
Horizontal Stretch/Compression	f(ax), a > 1	Compress horizontally by a factor of 1/a
Horizontal Stretch/Compression	f(ax), 0 < a < 1	Stretch horizontally by a factor of 1/a

You can *add*, *subtract*, *multiply*, and *divide* functions.

**Composite Function:** combination of functions

- Output of one function is the input of another

**Inverse Relation** → interchanges the input and output values of the original relation

- Domain & range are interchanged

<aside>
<img src="/icons/browser-stop_gray.svg" alt="/icons/browser-stop_gray.svg" width="40px" /> Just switch the *x* and *y values* to perform calculations.

</aside>

An inverse function’s original function must pass the **horizontal line test** for the inverse to be a function.

**Piecewise Functions** → at least two equations

- Different parts of the function’s domains

**Example:**

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/443018a8-2fd9-450f-b1ab-6a1a85a90a40/63cec59a-358a-46e8-b9bd-21ea69f19c28/image.png)

(Equations)
<aside>
<img src="/icons/downward_gray.svg" alt="/icons/downward_gray.svg" width="40px" /> Flip inequality signs when you **MULTIPLY** or **DIVIDE** by *negative* values.

</aside>

- **Or** → two different sets of values
- **And** → joined part of a set of values

# Equations of a Line

**Slope-Intercept** → y = mx + b

- m → slope
- b → y-intercept

**Point-Slope** → y - y₁ = m(x - x₁)

- m → slope
- (x₁, y₁) → point on the line

**Standard** → ax + by = c

- a is **POSITIVE**

**Literal Equation:** an equation with two or more variables

## Solving for a Variable

1. Locate the variable
2. Perform inverse operations to isolate the variable

**Two Possible Ways to Solve:** Elimination & Substitution

# Substitution

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/443018a8-2fd9-450f-b1ab-6a1a85a90a40/6149bf17-d2e9-4b06-8a1f-3e60ea631d7a/167f003a-f02a-448c-af1b-b4e22e0a600f.png)

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/443018a8-2fd9-450f-b1ab-6a1a85a90a40/038f4977-6548-44c5-9f10-36659ac14b18/image.png)

# Elimination

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/443018a8-2fd9-450f-b1ab-6a1a85a90a40/e1fd8459-7d3a-4a60-b325-935d56c4a55b/image.png)

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/443018a8-2fd9-450f-b1ab-6a1a85a90a40/70cda620-d22b-49aa-9b89-7744f2456111/image.png)

**Dotted Line** → > or <

**Filled-in Line** → ≥ or ≤

**Shaded Lower** → < or ≤

**Shaded Above** → > or ≥

# Linear Programming

**Linear Programming:** the process of taking various linear inequalities relating to some situation and finding the best value obtainable under those conditions

**Constraints:** set of inequalities that restrain the selection

- **Objective Function:** function to find the maximum amount for

- Put equations in **standard form** (Ax + By + Cz = D)
- Remove any decimals or fractions
- Eliminate one variable using two equations
    - **Result:** a new equation with 2 variables
- Eliminate the same variable using another set
    - **Result:** another equation with 2 variable
- Solve the two new equations
- Substitute the values to the original equations
- Check the solution set

**Least Square Regression Line (LSRL)** → values in a table and make a *line of best fit* (ŷ = mx + b)

- Minimizes the **sum of square errors (SSE)**
- **Residual:** amount overestimated or underestimated from the **ACTUAL** value
    - Vertical distance that a point on a scatterplot is from the LSRL

The sum of the residuals is **ALWAYS** 0.

<aside>
<img src="/icons/reorder_gray.svg" alt="/icons/reorder_gray.svg" width="40px" />

If the line of best fit is **UNDERESTIMATING**, the residual for the value is **POSITIVE.**

If the line of best fit is **OVERESTIMATING**, the residual for the value if **NEGATIVE**.

</aside>

If the graph of the residuals has no pattern, the line of best fit is a good fit.

**Examples of Correlation:**

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/443018a8-2fd9-450f-b1ab-6a1a85a90a40/c450a2ee-69c7-49c3-a205-7ae39349cd4d/image.png)

# Absolute Value Functions

**Parent Absolute Value Function:** |x|

- Vertex: (0,0)

**General Form of Absolute Value Function:** f(x) = a|x - h| + k

- Vertex: (h, k)

# Absolute Value Equations

Switch the sign of the right side and calculate the **TWO** possibilties.

- Check for **extraneous solutions** (plug it back in)

# Absolute Value Inequalities

<aside>
<img src="/icons/upward_gray.svg" alt="/icons/upward_gray.svg" width="40px" />

Similar to an equation **EXCEPT** you switch the *sign* and the *sign* of the right side.

</aside>

**Example:**

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/443018a8-2fd9-450f-b1ab-6a1a85a90a40/0d56265f-e552-4c76-863a-7d47a38ae31c/a0c0a237-dd6b-41d9-9ab8-785d8d981601.png)

(Matrices)
**TABLE OF CONTENTS**

---

**Matrix:** arrangement of numbers

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/443018a8-2fd9-450f-b1ab-6a1a85a90a40/8d8096b1-369f-4617-85f5-61e4ee5dd08e/image.png)

**Dimensions:** rows x columns (ex. 3x3)

# Adding and Subtracting Matrices

<aside>
<img src="/icons/whistle_gray.svg" alt="/icons/whistle_gray.svg" width="40px" />

You can add or subtract matrices only if **their dimensions are the same**.

</aside>

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/443018a8-2fd9-450f-b1ab-6a1a85a90a40/7c11228c-ac3f-4199-8cef-abde87687063/image.png)

![image (1).png](https://prod-files-secure.s3.us-west-2.amazonaws.com/443018a8-2fd9-450f-b1ab-6a1a85a90a40/65c1f30c-fa19-4a5a-beba-589ee08f34b9/image_(1).png)

# Multiplication with Matrices

### Scalar Multiplication

- Multiplying 1 number and a matrix

![image (2).png](https://prod-files-secure.s3.us-west-2.amazonaws.com/443018a8-2fd9-450f-b1ab-6a1a85a90a40/506923b6-877b-4cc2-b241-55ffaff1e109/image_(2).png)

You can solve for variables in matrices.

## Multiplying Matrices

<aside>
<img src="/icons/whistle_gray.svg" alt="/icons/whistle_gray.svg" width="40px" />

You can only multiply two matrices if…

- The number of columns in the first matrix = The number of rows in the second matrix
</aside>

**Stacking** → one matrix on top of the other

- First in row (A) * First in column (B) + Second in row (A) * Second in column (B) + …

![image (3).png](https://prod-files-secure.s3.us-west-2.amazonaws.com/443018a8-2fd9-450f-b1ab-6a1a85a90a40/763a8f15-1273-4c7a-8942-8dd6f1772829/image_(3).png)

# Determinants

- Only for square matrices

## Determinant of a 2x2 Matrix

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/443018a8-2fd9-450f-b1ab-6a1a85a90a40/4e61d2e4-095f-466b-bf31-4ec8c084ac7f/image.png)

## Determinant of a 3x3 Matrix

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/443018a8-2fd9-450f-b1ab-6a1a85a90a40/788a81f7-e3a8-4e0f-acff-2ac55301ea84/image.png)

### Area of a Triangle From Vertices

- Uses a 3x3 Matrix Determinant Equation

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/443018a8-2fd9-450f-b1ab-6a1a85a90a40/d56647af-9363-4269-a139-a3fea3e50d08/image.png)

# Matrix Inverses

- Determinant cannot be 0

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/443018a8-2fd9-450f-b1ab-6a1a85a90a40/3650240b-0d73-4bc9-af80-7414f2e5d8b4/image.png)

# Row Operations

- Switch rows
- Multiply rows by nonzero constants
- Add or subtract rows

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/443018a8-2fd9-450f-b1ab-6a1a85a90a40/9a827057-e052-44a5-bbe9-785b76741196/image.png)

# Solving Systems of Equations with Matrices

- Put coefficients and values into matrix
- Solve to *reduced row-echelon form*

--- PRE-AP BIOLOGY ---
(The Hot Zone)
Pgs. 1-25	Introduces Charles Monet, explains how he got the virus, shows how the virus spreads and kills him
Pgs. 26-50	Charles Monet is treated by Shem Musoke and dies, Shem Musoke gets the disease and causes confusion amongst the hospital, David Silverstein tries to resolve Dr. Musoke’s condition. They find out that it is a Marburg virus, which exploded in Germany, and about the isle of plagues with the monkeys. Introduces the Jaaxs
Pgs. 51-75	It describes Nancy Jaax and Ebola, before describing how Jaax will begin to work with Ebola
Pgs. 76-100	Nancy Jaax and Gene Johnson go to look at the monkeys, but it appears that Jaax gets infected by Ebola blood, However, it is a close call, Mr. Yu. G. in a town is infected and causes an outbreak called Ebola Sudan, but it dies down after hitting a hospital, Another lethal case occurred called Ebola Zaire
Pgs. 101-125	Explains how Ebola Zaire began and how it spread through uncleaned needles, Two nuns went a hospital called Ngaliema Hospital and one dies, The effects of Ebola are explained, The other nun is cared for by Nurse Mayinga and that nun dies, and Nurse Mayinga starts to feel symptoms, Nurse Mayinga dies her infection because she has a scholarship to study in Europe and doesn’t want to lose the ability to travel, Finally, she goes to hospitals and eventually comes back to Ngaliema Hospital where her conditions worsens, The government sends troops to section off the Bumba Zone, which includes the Ngaliema Hospital, The nun’s blood reaches Dr. Karl M. Johnson and another doctor named Frederick Murphy is able to look at it under a microscope and identifies it as a new virus, Richard Preston (the author) visits Karl Johnson and Johnson isn’t disturbed by a mass extinction of people, Finally, the doctors go into the Bumba Zone
Pgs. 126-150	In Ngaliema Hospital, Nurse Mayinga is being quarantined but she dies, Later, Gene Johnson receives a package of blood from a boy named Peter Cardinal, Eventually, they found out that Cardinal also went to Kitum Cave, like Charles Monet, the Army funds a research expedition into Kitum Cave, However, the expedition finds no trace of Marburg in the cave, making the expedition a failure
Pgs. 151-175	Nancy and Jerry Jaax are sent to the Institute of Chemical Defense, Reston is a wealthy suburb where the international monkey trade takes places, Dan Dalgard is a consulting veterinarian for the monkeys, Jerry Jaax’s brother, John, dies, Bill Volt is the house manager of the monkeys and calls Dalgard about certain monkeys dying with some shared symptoms, Dalgard sends samples from a monkey to virologist Peter Jahrling who examines the samples
Pgs. 176-200	When the monkeys catch with disease, Dalgard has to kill them, Thomas Geisbert studies viruses and pathogens and comes to look at the monkey cells, finding them to be breaking and exploding apart, Dalgard believes simian fever is affecting the monkeys but finds out that the virus is spreading throughout the rooms, Geisbert looks once more at the monkey cells and finds the filovirus, believing it to be Marburg, causing him great anxiety, Geisbert goes to talk to Peter Jahrling about what he thinks is Marburg
Pgs. 201-225	C.J. Peters in the chief at the Institute where Jahrling works, Jahrling and Geisbert go deeper into making sure it’s Marburg to not scare people unnecessarily, Jahrling and Geisbert don’t mention that they smelled the Marburg blood because they don’t want to go into the “Slammer,” where people are uncontaminated if they have a terrible virus, Jahrling and Geisbert get their blood and Jahrling takes it to test it, Geisbert’s pictures confirm to C.J. Peters that the agent is in monkeys, Jahrling’s tests would be the final confirmation that it’s Marburg, Jahrling calls Dalgard and implies that there is a second agent which Dalgard understands as Marburg, Jahrling tests for the different strains and finds that the monkeys had Ebola Zaire, Jahrling tests C.J. that the results are of Ebola Zaire, There is a meeting between Jahrling, C.J., Nancy Jaax, and Colonel David Huxsoll and Major General Philip K. Russell of USAMRIID, They recall that the disease is airborne, but they don’t know how airborne, Jahrling doesn’t mention that he sniffed it, They come to the conclusion that it is a national emergency
Pgs. 226-250	There were only three ways to stop a virus: vaccines, drugs, and biocontainment, The only possible method is biocontainment, They decide to either contain the monkeys or a full biohazard operation, They question if the virus is a military threat and if they should bring the Army to fight it, Everyone for C.J. to be the team leader of their mission, Major General Russell decides to first ask Frederick Murphy of the CDC, C.J. calls Dalgard and tells him that Ebola is much worse than Marburg, Dalgard learns of a monkey caretaker who got a heart attack, Bill Volt brings dead monkey samples to them
Pgs. 251-275	Nancy and Lieutenant Colonel Ron Trotter go into Level 4 to look at the monkeys, While looking into one, Nancy is unsure if the first monkey has Ebola, There is a large meeting between most of the people with knowledge of Ebola, Joe McCormick, a CDC representative, has difficulties with Gene Johnson and had a near-Ebola experience in the past while looking for the virus, C.J. Peters gets Jerry Jaax to assemble a team to go and check the monkeys, Johnson thinks about the best way to manage the virus and the team’s check-in on it, Dalgard types his diary and receives a call from Nancy Jaax that the results on the monkey necropsies were inconclusive, either Ebola or simian fever, The Army investigates Room H where the outbreak in the moneys began and order all entrances to Room H to be closed off, However, they are unaware of another entrance
Pgs. 276-300	Lab workers are fearing because of an exaggerated news report but Nancy calms them down, Dalgard invites C.J. Peters and Nancy Jaax to look at the monkeys in the monkey house, Jaax gets some fear from the monkeys, While Nancy works late, Jerry gets a phone call that Nancy’s dead is on the verge of passing, making Nancy feel a bit guilty for not being there, Jerry Jaax goes to the Institute, Gene Johnson is there and ready with his gear from the Kitum Cave, The Washington Post runs a story on the virus, C.J. is able to keep the situation calm, Jerry and Johnson go inside to look at the monkeys, Nancy and Captain Steven Denny also go in, the monkeys are then taken to be looked at further, Jerry and Johnson work and kill all the monkeys and their organs are taken to be studied
Pgs. 301-325	Nancy and her Hot Zone partner Ron Trotter work on the monkeys, They show clear signs of Ebola now, Dalgard goes to the monkey house and sees a monkey caretaker vomiting liquid, Frantig has a high fever, Dalgard made up his mind to evacuate the monkey house, C.J. Peters wants to put him in the Slammer but Joe McCormick sends him to a community hospital, Channel 4 News finds Frantig being taken to the hospital and the monkey caretakers leave the building, Dalgard turns the monkey house over to the Army, Jerry Jaax was the commander of the animal-care technicians (91-T), Jerry gets a team from 91-T to come with him to euthanize the remaining monkeys, Gene Johnson is worried deeply about his close calls with many hot agents, When the soldiers arrive, Johnson tells them and Jerry about the man who got sick through airborne transmission, The soldiers begin to get to work in euthanizing the monkeys
Pgs. 326-350	One of the workers loses air but makes it out safely, while a news van doesn’t notice the operation, The operation concludes successfully, Meanwhile, Thomas Ksaizek makes a test for Ebola, finding Frantig only with the flu, The 91-T team continues their operation the next day, but a monkey gets loose, Jerry and Sergeant Thomas Amen go to try and capture it, but it is constantly escaping, They leave the monkey there overnight, Meanwhile, Peter Jahrling continues investigating his own blood for signs of Ebola, Jahrling and Geisbert’s blood doesn’t test for Ebola, Nancy is notified by her brother that their father is dying, but Nancy decides that she can’t go and leave her post, Nancy goes to work on the monkey, Her father dies while she is working, She goes to his funeral, Soon enough, all the monkeys were killed including the escaped one
Pgs. 351-375	Sergeant Curtis Klages finds a freezer with dead monkeys and is instructed to decontaminate them, Gene Johnson sends a team to fully decontaminate the monkey house, Jahrling and Geisbert believe themselves to be definite survivors after nineteen days with no Ebola symptoms, the CDC traces the monkeys’ disease to the Philippines, but the workers they were never sick, The team conducts a mission to completely sterilize the monkey house, ridding it of all life, A month later, monkeys start dying again with Ebola, A man performing necropsies on them named John Coleus accidentally got exposed to Ebola, Eventually, all four monkey caretakers tested positive for Ebola but had no symptoms or disease, The virus just proliferated in them and then removed itself from their bloodstreams, Everyone at USAMRIID agreed that the virus could spread through the air, Preston talks to Nancy Jaax about Ebola, Jahrling and Geisbert named the new Ebola type Ebola Reston, from where it was discovered, Preston looks back at how no one knows exactly where Ebola Reston comes from
Pgs. 376-400	Robin MacDonald takes Preston a guide in Africa while Preston reminisces of the time he spent in Africa before, They continue their journey towards Mount Elgon, They reach and describe Kitum Cave, There are many interacting animal species in Mount Elgon, making it easier for a virus to jump species, Preston gets in a suit to go into Kitum Cave, recounting the events prior, including a man named Ian Redmond’s three-month stay in the cave with him remaining healthy, Preston continues his exploration through the cave, avoiding any danger
Pgs. 401-422	Preston finally returns and decontaminates his entire suit and accessories with bleach, Preston thinks of viruses as the Earth’s immune response to human actions and how they are detrimental to the environment, Along his journey, he also thinks about AIDS and HIV as terrible viruses, Preston also goes to the monkey house in Reston, Finally, he mentions how Ebola has gone and will return

(Lab Safety)
<aside>
<img src="/icons/error_gray.svg" alt="/icons/error_gray.svg" width="40px" /> **Safety** is the #1 priority for *students*, *parents*, and *teachers*.

</aside>

# General Rules

1. Conduct yourself responsibly.
2. Follow all instructions carefully.
3. Never work alone (without an instructor).
4. Don’t touch any equipment when first entering the lab.
5. Don’t eat, drink, or chew gum in the lab. Don’t use glassware as containers for food.
6. Perform only experiments authorized by the instructor.
7. Be prepared for lab work. Read all procedures carefully.
8. Never fool around in the lab.
9. Keep work areas clean. Bring only essential materials.
10. Keep aisles clear.
11. Know where the locations of safety equipment is.
12. Always work in a well-ventilated area.
13. Be alert. Proceed with caution.
14. Dispose of all chemical waste carefully.
15. Read equipment labels carefully before use.
16. Keep hands away from the face and body while using chemicals. Return all equipment cleaned to where it was originally.
17. Experiments must always be monitored.
18. Don’t enter storage rooms without permissions from an instructor.
19. Know what to do if there is a fire drill.
20. Handle all living organisms in a humane manner.
21. Always carry sharp objects with tips pointing down.
22. Check with your physician before working in the lab if you have a medical condition.

## Clothing

1. Always wear lab goggles.
2. Contact lenses may be worn is adequate protection is present.
3. Dress properly for lab activities.
4. Wear lab aprons.

## Accidents & Injuries

1. Report any accidents to the instructor.
2. Yell “Code one, code one” to get the instructor’s attention.
3. Use the eyewash station is a chemical splashes in your eyes.
4. Do not touch mercury if mercury thermometers are broken.

## Handling Chemicals

1. All chemicals are considered dangerous. Do not touch, taste, or smell unless instructed to.
2. Always check the chemical labels before removing any chemicals.
3. Never return unused chemicals to their original containers.
4. Never use mouth suction to fill a pipette.
5. Hold containers of chemicals away from your body.
6. Acids must be handled with extreme care.
7. Handle flammable liquids over a pan to contain spills.
8. Never remove lab materials from the lab area.
9. Take care when transporting chemicals.

## Handling Glassware & Equipment

1. Carry glass tubing vertically.
2. Never handle broken glass with your bare hands.
3. Be careful with using stoppers with glass tubing.
4. Fill wash bottles only with distilled water.
5. Plug in or remove electrical cords from the plug. Do not touch with wet hands.
6. Examine glassware before use.
7. Report damaged equipment immediately.
8. Ask your instructor if you are unsure how to use any equipment.
9. Do not put hot and cold together.

## Heating Substances

1. Use extreme caution with gas burners.
2. Never leave a lit flame unattended.
3. Do not point the open end of a heating tube at anyone.
4. Heated objects stay hot for a long time. They should be set aside to cool.
5. Never look into a container that is being heated.
6. Do not place heated equipment on a lab desk.
7. When bending glass, allow time for the glass to cool before handling further.

(Chapter 1: The Science of Biology)
1.1 — What is Science?

Scientists are constantly testing, debating, and revising scientific explanations of events in the natural world.

Scientists either understand or don’t.
The Nature of Science

Science: the use of evidence to construct testable explanations and predictions of natural phenomena.

Science is a process (organized way to observe the natural world).
Growing body of knowledge.
Science deals ONLY with the natural world.

Orderly fashion.
Explanations are based on evidence and understanding.
The Goals of Science

The universe is composed of many parts that INTERACT.

All objects in the universe and their interactions are governed by natural laws.
Scientific Uncertainty

Much of nature is still a mystery.
The Scientific Methodology

General style of scientific investigation.

Observing & Asking Questions

Observation: act of noticing and describing events or processes in a careful way.

Forming a Hypothesis

Inference: logical interpretation based on what scientists already know.

Hypothesis: tentative explanation that can be tested.

Controlled Experiments

Variables: factors that can change.

Controlled Experiment: an experiment in which one variable is changed while the others are kept constant.

Independent / Manipulated Variable: the variable that is deliberately changed.
Dependent / Responding Variable: the observed variable that changes in response to the independent variable.
Control Group: an experimental group that has no change in its independent variable.

Data Collection & Analysis

Data: scientific information collected through experiments.

Quantitative → numerical.
Qualitative → descriptive.
Scientists must use tools to structure and organize their observations.

Error must be as avoidable as possible.
Drawing Conclusions

Analyzing data allows scientists to reach conclusions.

Not ALL hypotheses can be tested by experiments.

Ethics can prevent experiments.
1.2 — Science in Context

Exploration and Discovery

Scientific ideas come from curiosity, skepticism, open-mindedness, and creativity.

Ideas for scientific investigations can arise from practical human issues.

Technology makes scientific experimentation easier.
Communicating Results

Scientists often collaborate in groups.

Scientists must appropriately publish their scientific work to benefit the general public.
Peer Review

Review of scientific research.

Peer reviewers look for mistakes, oversights, unfair influences, or fraud.

Sharing Knowledge

Once research is published, it can bring about new questions.

Scientific Theories

Theory: a reliable scientific explanation of the natural world that combines many observations and incorporates hypotheses.

Phenomena that have not been observed yet.
A theory is NEVER absolute truth.

Science is always changing.
Science & Society

Science has limitations.

Requires the understanding of society.
Science only tells us facts about the natural world.

No ethical or moral viewpoints.
Avoiding Bias

Bias: a personal point of view on a subject.

Scientific data is interpreted in different ways.
Recommendations with bias cannot be trusted.

Understanding & Using Science

Science occurs when humans wonder about nature.

Biology allows us to think about ourselves and life in nature.
1.3 — Studying Life

Characteristics of Living Things

Biology: the study of life.

Living things are:

Made of cells.
Based on genetic code.
Obtain and use energy.
Grow and develop.
Reproduce.
Respond to environmental stimuli.
Maintain homeostasis.
Change over time.
All living things are based on DNA (deoxyribonucleic acid).

Molecule that contains a cell’s genetic code.
Stimulus: a signal that an organism responds to.

Comes from the environment.
Homeostasis: keeping a stable internal environment.

Even if the external environment is extreme.
Metabolism: the combination of chemical reactions that occurs as an organism builds up or breaks down materials.

The Central Themes of Biology

All biological subjects are connected.

The Big Ideas of Biology:

Cellular Basis of Life.
Information & Heredity.
Matter & Energy.
Growth, Development & Reproduction.
Homeostasis.
Evolution.
Structure & Function.
Unity & Diversity of Life.
Interdependence in Nature.
Science as a “Way of Knowledge.”
Cellular Basis of Life

All living things are made of cells.

Some organisms are single-celled and some are multicellular.
Information & Heredity

DNA and genetic code influence every part of you.

Matter & Energy

Matter and energy allow for biological processes.

Growth, Development & Reproduction

New individuals grow into larger adults.

Cells become specialized for different tasks.
Homeostasis

Homeostasis maintains the organism’s internal environment.

Evolution

Evolutionary change allows organisms to adapt.

Structure & Function

Each major part of a body has a different specialization.

Performs different tasks.
Unity & Diversity of Life

Life is very different externally.

On a cellular level, life is very similar.
Interdependence in Nature

Biosphere: connections between all living things on Earth.

Relationships create cycles of matter and flow of energy.
Science as a “Way of Knowledge”

Science is NOT a list of facts.

Science is a way to understand.
Fields of Biology

Biology has many overlapping fields.

Biotechnology: field based on the editing of genetic code to redesign living things.

Building the “Tree of Life”

Biologists want to organize all living things into a “Tree of Life.”

There are more organisms to be discovered.
Infectious Diseases

All diseases originate from a certain interaction between organisms and their environment.

Genomics & Molecular Biology: studies of DNA and cellular molecules.

Performing Biological Investigations

Scientific Measurement

Most scientists use the METRIC system.

International System of Units.
Safety

Lab Safety rules are crucial.

Safety in biology for you and any living organisms you are studying.

(Chapter 2: The Chemistry of Life)
2.1 — The Nature of Matter

Atoms

Atom: basic unit of matter.

Came from Democritus.
The point at which you break something and it no longer is what it was before.
Atomos → “unable to be cut.”
Atoms are NOT the smallest unit of matter. There are subatomic particles.

Protons, Neutrons, Electrons.
Protons and Neutrons

About the same mass.
Protons: + (positively-charged).

Neutrons: 0 (neutrally-charged).

Nucleus: binding of protons and neutrons at the center of the atom.
Electrons

Electrons: - (negatively-charged).

1/1840 the mass of a proton.
Constant motion surrounding the nucleus.
Attracted to the protons in the nucleus but remain in orbit because of the energy of their motion.
Atoms have equal amounts of protons and electrons (electrically-neutral).

Elements & Isotopes

Chemical Element → a pure substance that consists of only one type of atom.

Represented by one or two-letter symbols.
Isotopes

Atoms can have different numbers of neutrons.

Isotopes: atoms that differ in the amount of neutrons they have.
Mass Number: total number of protons and neutrons in an atom.

Weighted → all possible isotopes are used in the calculation of average mass.
All isotopes of an element have the same properties.

Radioactive Isotopes

Have unstable nuclei (break down over time).
Radioactive isotopes are used to …

Treat/fight cancer.
Kill food-spoiling bacteria.
“Trace” the movement of substances inside an organism.
Chemical Compounds

Most elements are found in compounds with other elements.

Chemical Compound: a chemical combination of two or more elements in a definite proportion.
Shown in a chemical formula (shorthand for the composition of a chemical compound).
The properties of compounds look very different from the elements that they’re formed from.

Chemical Bonds

Involves the outermost electrons of the atoms (valence electrons).
Covalent and ionic bonds.
Ionic Bonds

Ionic Bond: one or more electrons are transferred from one atom to another.

Atoms that lose electrons → positively-charged cations.
Atoms that gain electrons → negatively-charged anions.
Ions: positively or negatively-charged atoms.

Covalent Bonds

Covalent Bond: moving electrons travel around the nuclei of both atoms.

Single Covalent Bond → shares 2 electrons.
Double Covalent Bond → shares 4 electrons.
Triple Covalent Bond → shares 6 electrons.
Molecule: structure formed when atoms are joined together by covalent bonds.

Van der Waals Forces

Some atoms have a stronger attraction to electrons than others.

Van der Waals Forces: intermolecular forces of attraction between molecules.
2.2 — Properties of Water

The Water Molecule

Found in a liquid state across most of the Earth.
In a neutral state.
Polarity

Water’s nucleus attracts electrons.

A partial positive and partial negative charge on two ends.
Hydrogen Bonding

Hydrogen Bonding: the attraction between a hydrogen atom with a partial positive charge and another atom with a partial negative charge.

Most Common Partially-Negative Atoms Involved in Hydrogen Bonding: Oxygen, Nitrogen, and Fluorine.
Cohesion: attraction between molecules of the same substance.

Adhesion: attraction between molecules of different substances.

Heat Capacity → takes large amounts of heat energy to make molecules move faster.

Raises the temperature of water.
Water has a HIGH heat capacity.

Water can take in a lot of heat and not change much temperature.
Solutions & Suspensions

Water is often found in a mixture.

Mixture: a material composed of two or more elements or compounds that are physically mixed together (not chemically combined).
Two Types of Mixtures that can be Made with Water: Solutions and Suspensions.

Solutions

Evenly-distributed components.
Solute → substance that is being dissolved.

Solvent → substance in which the solute dissolves.

Water can dissolve both ionic compounds and other polar molecules.

Once water has dissolved all the solute possible, it is saturated.
Acids, Bases & pH

Water molecules split apart to form ions.

The pH Scale

Measurement system to indicate the concentration of H⁺ and OH⁻ ions in a solution.
Ranges from 0 to 14.
pH of 7 → equal concentrations of H⁺ and OH⁻.

Ex. pure water.
pH < 7 → more H⁺ than OH⁻ (acidic).

pH > 7 → more OH⁻ than H⁺ (basic).

Each step on the pH scale has a factor of 10.

pH of 4 has 10x as many H⁺ ions as pH of 5.
Acids

Acid: any compound that forms H⁺ ions in solution.

High concentrations of H⁺ than pure water.
Strong acids → pH 1-3.
Ex. hydrochloric acid (HCl).
Bases

Base: any compound that forms OH⁻ in solution.

Low concentrations of H⁺ than pure water.
Strong bases → pH 11-14.
Ex. lye (commonly NaOH).
Buffers

Buffers: weak acids or bases that can react with strong acids or bases to prevent sharp, sudden changes in pH.

Helps to maintain homeostasis and keep bodily fluids in check.
Human body pH should be between 6.5 and 7.5.

2.3 — Carbon Compounds

The Chemistry of Carbon

Carbon can make strong covalent bonds with many elements.

All living organisms have carbon.
Carbon molecules can form chains (bonding with other carbons).
Biomolecules

Biomolecules: large, organic molecules found in living things.

Also known as macromolecules because of their size.
Made from many smaller molecules.
Formed through polymerization.
Polymerization: a process in which compounds are built by joining smaller ones together.

Smaller units → monomers.
Can be identical or different.
Formations → polymers.
Carbohydrates

Carbohydrates: compounds made up of carbon, hydrogen, and oxygen atoms (common ratio → 1:2:1).

Used by living things as a source of energy.
Extra sugar can be stored as starches.
Known as sugar molecules.
Monosaccharides: single sugar molecules.

Polysaccharides: large biomolecules formed by joining many monosaccharides together.

Glycogen → stores energy.
Lipids

Lipids: a large and varied group of biomolecules that are generally not soluble in water.

Made from carbon and hydrogen atoms.
Ex. fats, oils, waxes.
Steroids synthesized by the body are lipids.

Function as chemical messengers.
Lipids can be formed when glycerol & fatty acids bond.

Saturated → all carbons are connected by single covalent bonds.
Unsaturated → at least one double bond.
Nucleic Acids

Nucleic Acids: biomolecules containing hydrogen, oxygen, nitrogen, carbon, and phosphorus.

Polymers assembled from nucleotides (the monomers).
Nucleotides consist of:

A 5-Carbon Sugar.
A Phosphate Group.
A Nitrogenous Base.
Nucleic acids function to transmit genetic information.

Two Types of Nucleic Acids: DNA and RNA.
Proteins

Proteins: biomolecules that contain nitrogen, carbon, hydrogen, and oxygen.

Polymers of amino acids.
Amino Acids: compounds with an amino group on one end and a carboxyl group on the other.

Linked by peptide bonds to form a polypeptide.
Proteins are built from one or more polypeptides.

Variety of functions (ex. controlling reaction rate, regulating cell processes).
Amino acids can join each other.

Proteins are some of the most diverse molecules.
Proteins have four levels of organization.

Sequence of Amino Acids.
Folding of the Polypeptide Chain.
3D Arrangement of the Polypeptide Chain.
How Polypeptide Chains (if more than one) are Organized in Relation to One Another.
2.4 — Chemical Reactions & Enzymes

Chemical Reactions

Chemical Reaction: a process that changes a set of chemicals into another.

Mass and energy are conserved.
Reactants: elements/compounds entering into a reaction.

Products: elements/compounds produced by a reaction.

Chemical reactions change the chemical bonds.
Energy in Reactions

Energy is released or absorbed when chemical bonds are formed or broken.

Chemical reactions that release energy occur on their own.

Chemical reactions that absorb energy require an energy source.

Organisms need energy to carry out reactions.

Activation Energy

Activation Energy: the energy needed to start a reaction.

Involved whether releasing or absorbing energy.
Enzymes

Catalyst: a substance that speeds up the rate of a reaction.

Nature’s Catalysts

Enzymes: proteins that act as biological catalysts.

Lower activation energies.
Enzymes are very specific, tailored to certain reactions.

The Enzyme-Substrate Complex

Enzymes provide a site for reactants to react.

Reduces energy needed.
Substrates: reactants of enzyme-catalyzed reactions.

Bind to a site on the enzyme called the active site.
Active sites and substrates have precise fits to match together.

Regulation of Enzyme Activity

Enzymes …

Control chemical pathways.
Make materials needed by cells.
Release energy.
Transfer information.
Enzyme activity can be affected by temperature, pH, and regulatory molecules.

Most enzymes work at around 37°C.
Some molecules show ‘on’ or ‘off’ chemical signals.

(Chapter 7: Cell Structure & Function)
7.1 — Life is Cellular
The Discovery of the Cell
In the 1500s, the microscope was invented to enhance smaller things into larger images.

Robert Hooke studied a cork under a microscope and found empty chambers, which he called “cells.”

Anton van Leeuwenhoek used a microscope to find organisms in ponds, water, and his mouth, calling them bacteria.

<aside> **Cells** are the basic unit of life. </aside>
Cell Theory
Matthias Schleiden concluded that all plants are made of cells.
Theodor Schwann concluded that all animals are made of cells.
Rudolf Virchow concluded that new cells are only birthed from existing cells.
These discoveries formed the cell theory:

All living things are made of cells.
Cells are the basic units of structure and function in living things.
New cells are produced from existing cells.
Microscopes
Use lenses to magnify the image of an object by focusing light or electrons.
Compound Light Microscopes
Allows light to pass through a specimen.
Uses two lenses to form a picture.
Objective Lens: above the specimen, enlarges the image.

Ocular Lens: magnifies the image further.

Light microscopes can produce clear images at a magnification of ~1000 times. Since cells are transparent, they must be stained to be clearly viewed.

Electron Microscopes
View smaller things than light microscopes can.
Transmission Electron Microscopes: explore cell structures and large proteins.

Samples must be cut ultrathin.
Electrons pass through thin samples, producing flat 2D images.
Scanning Electron Microscopes: provide 3D images of a specimen’s surface.

Does not require thin slices.
Electron microscopy must be used in a vacuum.

Prokaryotes & Eukaryotes
All cells contain genetic information and are surrounded by a cell membrane.

Cells fall into two categories based on the presence of a nucleus.

Nucleus: a large membrane-enclosed structure containing DNA that controls cell activities.

Eukaryotes: cells that enclose their DNA in nuclei; larger and more complex.

Prokaryotes: cells that do not enclose genetic material in nuclei; smaller and simpler.

7.2 — Cell Structure
Labeling Practice
Two main parts of the cell: nucleus and cytoplasm.

The cytoplasm of a prokaryote is just the interior.
Organelles: specialized structures in cells, similar to “organs” in the human body.

The Nucleus
Control center of the cell.
Nucleus: contains all the cell’s DNA and instructions for making proteins and other molecules.

Prokaryotic cells lack a nucleus.
Surrounded by the nuclear envelope, with thousands of nuclear pores for transport.

Chromosomes: carry the cell’s genetic material, found in the nucleus as chromatin (thread-like form).

Nucleolus: small, dense region inside the nucleus where ribosomes are assembled.

Support & Storage Organelles
Vacuoles: store water, salts, proteins, and carbohydrates. Plants typically have a large singular vacuole.

Vesicles: store and move materials in and out of the cell.

Lysosomes: small organelles that break down lipids, carbohydrates, and proteins for use by the cell, using enzymes. Dysfunction can lead to diseases.

The Cytoskeleton
Provides shape and internal organization to the cell.
Microfilaments: threadlike structures made of actin, forming networks and helping cells to move.

Microtubules: hollow structures made of tubulins, maintaining cell shape and important in cell division (mitotic spindle).

Centrioles: formed from tubulins, organizing cell division; not found in plant cells.

Protein-Building Organelles
Cells focus on protein production and distribution.

Ribosomes: small RNA particles found in all cells, following coded instructions from DNA.

Endoplasmic Reticulum (ER): internal membrane system for synthesizing lipids and proteins.

Rough ER: involved in protein synthesis, with ribosomes on the surface.
Smooth ER: synthesizes lipids and detoxifies drugs, without ribosomes.
Golgi Apparatus: stack of membranes that modifies, sorts, and packages proteins and materials from the ER.

Energy-Producing Organelles
<aside> All living things require **energy**. </aside>
Chloroplasts: capture energy from sunlight and convert it into food (photosynthesis). Contain chlorophyll.

Mitochondria: convert chemical energy from food into usable compounds. Have an inner and outer membrane.

Chloroplasts and mitochondria have their own DNA, suggesting they were once independent organisms.

Cellular Boundaries
Cell Wall: strong layer supporting and encasing the cell; found in most prokaryotes and plants.

All cells contain cell membranes, made up of a lipid bilayer.

Lipid Bilayer: gives membranes a flexible structure, forming a barrier that regulates entry and exit.

Properties of Lipids
Oily fatty acid chains with strong interactions with water.
Hydrophobic End: away from water.

Hydrophilic End: attracted to water.

Two layers form a bilayer.
The Fluid Mosaic Model
Protein molecules can be embedded in the lipid bilayers, floating around the bilayer (fluid mosaic). Proteins help move materials across the bilayer.

Membranes are permeable if objects can pass through, impermeable if they cannot, and selectively permeable if some substances can pass while others cannot.

7.3 — Cell Transport
Passive Transport
<aside> Every living cell exists in a liquid environment. </aside>
The cell membrane maintains relatively constant internal conditions by regulating the movement of substances.
Diffusion
Particles move from areas of higher concentration to areas of lower concentration.
Diffusion drives the movement of substances across a membrane until equilibrium is reached.

Passive Transport: movement of molecules across the cell membrane without using energy.

Facilitated Diffusion
Proteins in the cell membranes act as channels for certain substances.

Facilitated Diffusion: process in which molecules unable to pass through the membrane directly use specific protein channels; it’s fast, specific, and does not require energy.

Osmosis
Water has difficulty passing through the membrane due to the hydrophobic interior.

Aquaporins: proteins that allow water to pass through.

Osmosis: diffusion of water through a selectively permeable membrane, moving from higher to lower concentration.

In osmosis, the side with more sugar is hypertonic, and the side with less is hypotonic. After osmosis, they reach an isotonic state.

Osmotic Pressure: the force causing hypertonic solutions to shrink and hypotonic solutions to swell, affecting cell vacuoles.

Active Transport
Active Transport: movement of materials against a concentration difference, requiring energy and generally carried out by protein pumps.

Bulk Transport
Larger molecules and clumps of material can be transported across the membrane.

Endocytosis
Material is taken into the cell by folding the membrane, forming vesicles.

Examples: phagocytosis (cells engulfing material) and pinocytosis (cells taking up liquid).

Exocytosis
Release of large amounts of material when vesicle membranes fuse with the cell membrane, forcing contents out.
7.4 — Homeostasis & Cells
Maintaining Homeostasis in Individual Cells
Single cells can be organisms.

Homeostasis: relatively constant internal conditions.

Individual cells grow, respond to stimuli, transform energy, and reproduce to maintain homeostasis.
Unicellular organisms can be prokaryotic or eukaryotic.

Maintaining Homeostasis in Multicellular Organisms
<aside> The cells of multicellular organisms **specialize** for tasks and **communicate** to maintain homeostasis. </aside>
Levels of Organization
Cells
Tissues: groups of similar cells performing functions.
Organs: groups of tissues.
Organ Systems: groups of organs working together for specific functions.
Different levels of life allow for homeostasis maintenance.

Cellular Communication
Cells communicate with chemical signals, affecting activities in receiving cells.
Certain cells form cellular junctions with neighboring cells, allowing direct communication through receptors.

(Chapter 10: Cell Growth & Division)
10.1 — Cell Growth, Division & Reproduction
Limits to Cell Size
<aside> <img src="/icons/arrow-up-line_gray.svg" alt="/icons/arrow-up-line_gray.svg" width="40px" /> A larger cell has more demand on the DNA. </aside>
Larger cells face inefficiencies in material transport.
Information Overload
As cells grow, their DNA does not increase proportionally, leading to potential overload.
Exchanging Materials
Surface area increases slower than volume, making transport less efficient.
<aside> <img src="/icons/branch-create_gray.svg" alt="/icons/branch-create_gray.svg" width="40px" /> Cells must **DIVIDE** rather than *GROW*. </aside>
Cell Division
Growing cells divide into two daughter cells to manage size and maintain efficiency.

Cell Division: the process through which a cell divides to form two new cells, ensuring each daughter cell receives sufficient genetic material.
Cell Reproduction
Asexual Reproduction
Asexual Reproduction: produces genetically identical offspring from one parent.

Advantages include simplicity and rapid population increase, commonly found in unicellular organisms.
Sexual Reproduction
Sexual Reproduction: involves the fusion of two parent cells, leading to genetically diverse offspring.

ASEXUAL REPRODUCTION	SEXUAL REPRODUCTION
Faster reproduction in optimal conditions	Takes more time
Low genetic diversity	Higher genetic diversity for adaptation
10.2 — The Process of Cell Division
Chromosomes
<aside> <img src="/icons/copy_gray.svg" alt="/icons/copy_gray.svg" width="40px" /> Cells must copy their DNA before reproducing. </aside>
DNA is organized into chromosomes for efficient separation during cell division.
Eukaryotic cells have more DNA than prokaryotes, forming chromatin with histone proteins.

The Cell Cycle
Cell Cycle: series of events cells undergo to grow and divide.

In prokaryotes, this occurs via binary fission.
Eukaryotes go through four stages: G₁, S, G₂, and M phases.
Interphase
G₁ Phase: growth, increase in size, and synthesis of proteins and organelles.

S Phase: DNA replication occurs.

G₂ Phase: preparation for cell division by producing required organelles and molecules.

M Phase
M Phase: produces two daughter cells.

M phase is shorter compared to interphase, which occupies most of the cell cycle.
Mitosis
Prophase
Chromatin condenses into visible chromosomes.
Spindle fibers begin to form and centrioles move to opposite poles.
Metaphase
Chromosomes align at the cell's equator, and spindle fibers attach to centromeres.
Anaphase
Sister chromatids separate and move to opposite poles of the cell.
Telophase
Chromosomes de-condense back into chromatin, and the nuclear envelope re-forms.
Cytokinesis
Cytokinesis: division of the cytoplasm.

In animal cells, the membrane pinches inward.
In plant cells, a cell plate forms to separate the cells.
10.3 — Regulating the Cell Cycle
Controls on Cell Division
Cells typically stop growing upon contact with others.
Cyclins
Cyclins: proteins that regulate the timing of the cell cycle.

Regulatory Proteins
<aside> <img src="/icons/command-line_gray.svg" alt="/icons/command-line_gray.svg" width="40px" /> Regulatory proteins control the cell cycle from inside and outside the cell. </aside>
Internal Regulators: respond to internal events and ensure the cycle progresses only after certain conditions are met.

External Regulators: include growth factors that stimulate cell growth and division.

Apoptosis
Apoptosis: programmed cell death, which helps eliminate unnecessary or damaged cells.

Cancer
Cancer: a disorder characterized by uncontrolled cell growth.

<aside> <img src="/icons/command-line_gray.svg" alt="/icons/command-line_gray.svg" width="40px" /> Cancer cells do not respond to regulatory signals. </aside>
Tumors form when cells grow uncontrollably.
Benign tumors do not spread; malignant tumors do.
Causes of Cancer
Often caused by defects in genes regulating growth, including environmental factors like tobacco use, radiation, and viral infections.
Cancer Treatments
Options include surgery, radiation therapy, and chemotherapy.
10.4 — Cell Differentiation
All life begins from a single cell.

What is Differentiation?
Differentiation: the process by which cells specialize for specific functions.

Stem Cells & Development
The fertilized cell is the zygote, which is totipotent and can develop into any cell type.

As development progresses, cells form a blastocyst, with inner cells becoming pluripotent.

Stem Cells: unspecialized cells that can differentiate into specialized cells.

Adult stem cells are multipotent, able to replace cells in their specific tissues.
Stem Cell Research
Regenerative Medicine: aims to use stem cells to repair or replace damaged tissues.
Cellular Reprogramming: allows for the transformation of cells into different types.
<aside> <img src="/icons/new-alert_gray.svg" alt="/icons/new-alert_gray.svg" width="40px" /> Ethical dilemmas surround stem cell use, particularly regarding embryonic sources. </aside>

(Chapter 12: DNA)
12.1 — Identifying the Substance of Genes
Bacterial Transformation
Frederick Griffith conducted experiments on bacteria to understand how they cause disease.

Transformation: A process where a chemical compound transforms harmless bacteria into disease-causing ones, indicating the presence of genetic material.
The Hershey-Chase Experiment
This experiment determined whether proteins or DNA entered bacteria during infection.

It was found that DNA is the genetic material, as only the DNA core entered the bacterium.
<aside> <img src="/icons/dna_gray.svg" alt="/icons/dna_gray.svg" width="40px" /> **Conclusion:** DNA is the genetic material found in all living cells. </aside>
The Role of DNA
DNA serves three main functions:

Storing Information: DNA holds genetic instructions.
Copying Information: DNA must be replicated before cell division.
Transmitting Information: Genes pass from one generation to the next accurately.
<aside> <img src="/icons/forward_gray.svg" alt="/icons/forward_gray.svg" width="40px" /> Accurate transmission prevents errors. </aside>
12.2 — The Structure of DNA
The Components of DNA
DNA (Deoxyribonucleic Acid): A long, slightly acidic molecule identified in cell nuclei.

Nucleic Acids & Nucleotides
Nucleic Acids: Composed of smaller subunits called nucleotides.
Each nucleotide consists of:

A 5-carbon sugar (deoxyribose)
A phosphate group
A nitrogen base
Nitrogenous Bases & Covalent Bonds
Nitrogenous Bases: Four types—adenine (A), thymine (T), cytosine (C), guanine (G).

Nucleotides are linked by covalent bonds between the sugar of one and the phosphate of the next.
<aside> <img src="/icons/sharing_gray.svg" alt="/icons/sharing_gray.svg" width="40px" /> Nucleotides can be arranged in any order but connect with complementary bases only. </aside>
Solving the Structure of DNA
Chargaff’s Rule
Erwin Chargaff discovered that:

[A] = [T] and [G] = [C]
Rosalind Franklin
Franklin used X-ray diffraction to reveal the structure of DNA:

Purified DNA.
Stretched DNA fibers.
Aimed an X-ray beam at DNA samples.
Her images showed a helix structure with two strands.

Watson and Crick
James Watson and Francis Crick built on Franklin's work to propose the double-helix model.

<aside> <img src="/icons/camera-roll_gray.svg" alt="/icons/camera-roll_gray.svg" width="40px" /> They recognized the significance of Franklin's DNA images. </aside>
The Double-Helix Model
The DNA structure resembles a twisted ladder, with two strands twisted around each other.
Antiparallel Strands
The strands run in opposite directions, with nitrogenous bases meeting at the center.

Hydrogen Bonding
Hydrogen bonds hold the base pairs together, allowing easy separation.

Base Pairing
Base Pairing: A-T and C-G pairings explain Chargaff’s rule.

12.3 — DNA Replication
Copying the Code
<aside> <img src="/icons/golf_gray.svg" alt="/icons/golf_gray.svg" width="40px" /> Each base corresponds with only one other base. </aside>
This specificity allows DNA replication, where one strand serves as a template for the other.

The Process of DNA Replication
Replication: The process of copying DNA during the S phase of the cell cycle, ensuring each new cell has a complete DNA molecule.

The Role of Enzymes
Enzymes "unzip" DNA by breaking hydrogen bonds.

DNA Polymerase: Joins nucleotides to form a complementary strand and proofreads each strand.
Telomeres
Telomeres: The ends of eukaryotic chromosomes.

Telomerase: Enzyme that replicates telomeres, preventing genetic information loss.
Replication in Living Cells
Occurs in the S phase, where DNA and histones form nucleosomes.

Histones: Proteins that help package DNA into chromatin.

Prokaryotic DNA Replication
Initiates at a single point and proceeds bidirectionally until the chromosome is copied.
Eukaryotic DNA Replication
Starts at multiple sites and proceeds in both directions.
<aside> <img src="/icons/bomb_gray.svg" alt="/icons/bomb_gray.svg" width="40px" /> Errors can occur during replication despite proofreading by multiple proteins. </aside>

(Chapter 13: RNA & Protein Synthesis)
13.1 — RNA
The Role of RNA
RNA (Ribonucleic Acid) is crucial for copying DNA.

One DNA strand acts as a template, while the other is copied by DNA polymerase.
Genes contain coded instructions for protein synthesis.
Comparing RNA and DNA
RNA has a ribose sugar.
RNA is single-stranded.
RNA contains uracil instead of thymine.
<aside> <img src="/icons/departures_gray.svg" alt="/icons/departures_gray.svg" width="40px" /> DNA remains in the nucleus, while RNA can travel to ribosomes in the cytoplasm. </aside>
Functions of RNA
RNA serves as a disposable copy of DNA primarily for protein synthesis.

Messenger RNA (mRNA): Carries genetic instructions for assembling proteins.
Ribosomal RNA (rRNA): Forms part of the ribosome's structure.
Transfer RNA (tRNA): Transfers specific amino acids to the ribosome as dictated by the mRNA.
RNA Synthesis
Transcription
Transcription involves using DNA as a template to produce complementary RNA strands.

In prokaryotes, this occurs in the cytoplasm.
In eukaryotes, it takes place in the nucleus before mRNA moves to the cytoplasm.
RNA polymerase is the enzyme responsible for transcription, binding to DNA and synthesizing RNA.

Promoters
RNA polymerase attaches to promoters, specific DNA regions that signal where transcription starts and stops.

RNA Editing
Before mRNA is mature, it undergoes editing:

Introns: Non-coding regions removed from the RNA.
Exons: Coding regions that are spliced together to form the final mRNA.
This editing process enables one gene to produce multiple mRNA variants.

13.2 — Ribosomes & Protein Synthesis
The Genetic Code
Proteins are formed by linking amino acids into polypeptides. The sequence of amino acids determines a protein's structure and function.

The genetic code consists of the four nucleotides (A, T, C, G) read in groups of three, known as codons.

Reading Codons
<aside> <img src="/icons/octagon_gray.svg" alt="/icons/octagon_gray.svg" width="40px" /> There are **64 possible codons** that can code for amino acids. </aside>
Some amino acids are specified by multiple codons.
Start and Stop Codons
Start Codon: Methionine (AUG) signals the beginning of protein synthesis.
Stop Codons: There are three codons that terminate translation.
<aside> <img src="/icons/government_gray.svg" alt="/icons/government_gray.svg" width="40px" /> Start and stop codons regulate the initiation and termination of protein synthesis. </aside>
Translation
Translation is the process by which ribosomes decode mRNA to assemble amino acids into polypeptides.

mRNA enters the cytoplasm.
Translation begins at the start codon (AUG).
tRNA anticodons pair with mRNA codons.
tRNA delivers corresponding amino acids.
The process continues until a stop codon is reached, resulting in a completed polypeptide.
The Molecular Basis of Heredity
Central Dogma of Molecular Biology: Information flows from DNA to RNA to protein.

Gene Expression encompasses how DNA, RNA, and proteins interact to express genetic information.
13.3 — Mutations
Types of Mutations
Mutations are heritable changes in genetic information.

Gene Mutations: Affect a single gene.
Chromosomal Mutations: Involve changes to whole chromosomes.
Gene Mutations
Point Mutations: Involve changes at a single point in the DNA sequence.

Substitution: A single base is replaced by another.
Frameshift Mutations: Alter the "reading frame" of the genetic message:
Insertions: Adding an extra base.
Deletions: Removing a base.
<aside> <img src="/icons/art_gray.svg" alt="/icons/art_gray.svg" width="40px" /> Frameshift mutations can severely disrupt protein function. </aside>
Chromosomal Mutations
Chromosomal mutations can change chromosome structure or number:

Deletion: Loss of a chromosome segment.
Duplication: An extra copy of a chromosome segment.
Inversion: Reversal of a chromosome segment.
Translocation: A segment moves to a different chromosome.
Effects of Mutations
Mutations can arise from natural or artificial causes and are generally harmless.

Mutagens
Mutagens: Environmental agents that can cause mutations, such as certain chemicals and radiation.

Harmful & Helpful Mutations
Some mutations are neutral, while others can disrupt gene function significantly.
<aside> <img src="/icons/volume-off_gray.svg" alt="/icons/volume-off_gray.svg" width="40px" /> Mutations contribute to genetic diversity among organisms. </aside>
Polyploidy: A condition in which an organism has extra sets of chromosomes.

13.4 — Gene Regulation & Expression
Prokaryotic Gene Regulation
Prokaryotes utilize only the genes necessary for survival.

<aside> <img src="/icons/command-line_gray.svg" alt="/icons/command-line_gray.svg" width="40px" /> DNA-binding proteins regulate gene expression by controlling transcription. </aside>
Operon: A cluster of genes regulated together, often with related functions (e.g., lac operon in E. coli).

Promoters and Operators
Promoters (P): Sites where RNA polymerase binds to start transcription.
Operators (O): Sites for DNA-binding proteins that regulate gene expression.
Eukaryotic Gene Regulation
Eukaryotic genes are typically regulated individually.

TATA Box: A DNA sequence that indicates where RNA polymerase should begin transcription.

Transcription Factors
Multiple transcription factors influence gene expression by modifying chromatin and attracting RNA polymerase.

<aside> <img src="/icons/science_gray.svg" alt="/icons/science_gray.svg" width="40px" /> Some transcription factors respond to chemical signals, such as steroid hormones. </aside>
Cell Specialization
Complex gene regulation allows different cells to carry out specialized functions.

RNA Interference
microRNA (miRNA) are small RNA molecules that regulate gene expression by binding to complementary mRNA sequences.

RNA Interference (RNAi): A method of silencing gene expression through miRNA.
This technique allows researchers to selectively turn genes on or off.

Genetic Control of Development
Differentiation: The process by which cells become specialized.

Regulated by transcription factors and repressors.
Homeotic Genes
Homeotic genes control the identity of body parts.

Homeobox and Hox Genes
Homeobox Genes: Encode transcription factors that regulate other genes involved in development.

Hox Genes: A subset of homeobox genes that determine segment identities along the body axis.

Environmental Influences
Environmental factors can also affect cell development and differentiation, such as temperature influencing metamorphosis in tadpoles.

(Chapter 20: Viruses & Prokaryotes)
20.1 — Viruses
The Discovery of Viruses
Martinus Beijerinck was the first to name disease-causing particles viruses (Latin for poison). Wendell Stanley later crystallized viruses, leading to the theory that they are not alive.

Virus: A nonliving particle composed of proteins, nucleic acids, and sometimes lipids.

<aside> <img src="/icons/skull_gray.svg" alt="/icons/skull_gray.svg" width="40px" /> Viruses can reproduce **ONLY** by infecting living cells. </aside>
Structure & Composition of Viruses
Capsid: The protein coat that surrounds a virus.
Viruses enter cells by attaching to receptor proteins on the capsid or tricking the cell into allowing entry. They start reproducing once their genes are expressed.
Viruses have specific receptor proteins for different hosts:

Plant viruses infect only plants.
Animal viruses infect only animals.
Bacteriophages specifically infect bacteria.
Viral Infections
Lytic Infections
In a lytic infection, a virus enters a bacterial cell, replicates, and causes the cell to burst, releasing new viruses.

Lysogenic Infections
In a lysogenic infection, the viral DNA integrates with the host cell's DNA and replicates with it, so daughter cells carry the viral DNA.

Prophage: Bacteriophage DNA integrated into the host’s DNA, which can activate to form new viruses.
Retroviruses: These viruses convert RNA into DNA within the host.
Viruses & Cells
All viruses are PARASITES, relying entirely on their hosts for survival.

20.2 — Prokaryotes
Classifying Prokaryotes
Prokaryotes are the most abundant microorganisms, characterized by being unicellular and lacking a nucleus. They can be classified as either Bacteria or Archaea.

Bacteria
Larger than archaea with diverse forms.
Generally surrounded by a cell wall, which contains peptidoglycan (a polymer of sugars and amino acids).
Some bacteria possess flagella for movement.
Archaea
Similar in appearance to bacteria but have unique features:
Cell walls lack peptidoglycan.
Membranes contain distinct lipids.
Archaea are genetically more closely related to eukaryotes and can thrive in extreme environments.
Prokaryote Structure & Functions
Prokaryotes exhibit a variety of sizes, shapes, and metabolic processes.

Shape Variations
Bacilli: Rod-shaped.
Cocci: Spherical.
Spirilla: Corkscrew-shaped.
Nutrition & Metabolism
Prokaryotes store energy primarily in sugars, and they are categorized based on their energy and nutrient absorption:

Heterotrophs: Absorb organic molecules from their environment.
Photoheterotrophs: Use light energy along with organic molecules.
Photoautotrophs: Use light to convert CO₂ into organic compounds.
Chemoautotrophs: Derive energy from chemical reactions.
Prokaryotic Growth, Reproduction & Recombination
Binary Fission: The asexual reproduction method where a prokaryotic cell divides after growing to twice its size.

In harsh conditions, prokaryotes can form endospores, allowing them to survive.
How Prokaryotes Evolve
Mutation: Random changes in DNA that can be passed on during binary fission.
Conjugation: The transfer of genetic material between prokaryotic cells, enhancing genetic diversity.
The Importance of Prokaryotes
Prokaryotes play critical roles in ecosystems:

Decomposers
They break down organic material, maintaining ecological balance and nutrient cycling.

Producers
Prokaryotes can produce food and biomass in various ecosystems.

Nitrogen Fixers
<aside> <img src="/icons/science_gray.svg" alt="/icons/science_gray.svg" width="40px" /> Nitrogen is essential for all organisms. </aside>
Only prokaryotes can convert atmospheric nitrogen (N₂) into usable forms, such as ammonia (NH₃), which plants can utilize.
Human Uses of Prokaryotes
Food production (e.g., yogurt)
Production of commercial products
Petroleum digestion
Waste removal
Drug synthesis
Genetic engineering
Industrial chemistry
20.3 — Diseases Caused by Bacteria & Viruses
Bacterial Diseases
Pathogens are agents that cause disease, with bacteria and viruses being the most prevalent. Louis Pasteur demonstrated the link between bacteria and disease.

Bacterial Disease Mechanisms
Bacteria cause diseases by:

Destroying living cells.
Releasing toxins that disrupt homeostasis.
Controlling Bacteria
Effective methods for controlling bacteria include:

Proper hygiene (washing hands)
Using disinfectants
Storing food at lower temperatures
Boiling food to kill bacteria
Sterilization techniques
Vaccine: A preparation of weakened or killed pathogens or inactivated toxins that builds immunity against specific diseases.

Immunity: The body's ability to recognize and eliminate pathogens before they cause disease.

Antibiotics: Drugs that inhibit bacterial growth or reproduction.

Viral Diseases
Viral Disease Mechanisms
Viruses cause diseases by:

Directly destroying living cells.
Disrupting homeostasis within the host.
Preventing Viral Disease
<aside> <img src="/icons/star-of-life_gray.svg" alt="/icons/star-of-life_gray.svg" width="40px" /> Vaccines and personal hygiene are key to preventing viral diseases. </aside>
Not all viral diseases can be treated; however, antiviral drugs are under development to combat certain viruses.

Emerging Diseases
Emerging Disease: A new or previously controlled disease that appears in a population for the first time or becomes more difficult to manage.

The increase in technology has led to greater human contact with potential pathogens.

“Superbugs”
Overuse of antibiotics leads to antibiotic resistance, resulting in superbugs that are resistant to multiple antibiotics.

New Viruses
Viruses can replicate quickly and mutate rapidly, complicating treatment and prevention.

Prions
Prions: Misfolded proteins that can accumulate and damage brain tissue, leading to severe neurological disorders.

--- PE & HEALTH ---
(Components of Physical Fitness)
**Components of Physical Fitness**

- Aerobic Endurance / Cardio-Respiratory Fitness
- Muscular Strength
- Muscular Endurance
- Flexibility
- Body Composition

# Aerobic Endurance / Cardio-Respiratory Fitness

**Aerobic Endurance** → body’s ability to use oxygen

- Combination of the respiratory and circulatory systems
- Allows working muscles to exercise for longer

# Muscular Strength & Endurance

**Muscular Strength** → ability to exert a force against a resistance

- Ex. lifting weights

**Muscular Endurance** → ability to repeat muscle exertions

- Ex. sit-ups, push-ups

# Flexibility

**Flexibility** → ability to move through a full range of motion through a joint

- Depends on multiple factors
    - Females are more flexible than males
    - Joint mobility decreases with age

<aside>
<img src="/icons/sock_gray.svg" alt="/icons/sock_gray.svg" width="40px" />

**Stretching** lengthens the muscles.

</aside>

# Body Composition

**Body Composition** → percentage of body fat found in the body

- Women → 19-26% body fat
- Men → 15-19% body fat

Women typically have more percentage of body fat.

(Basketball)
# The History of Basketball

Mr. James Naismith introduced basketball in 1891

- Currently an Olympic Sport

# Basketball Skills

## Dribbling

- Head up and eyes focused
- Knees bent
- Free arm is out
- Dribble knee-to-waist high

## Pivot

- Changing direction without using a dribble
- One foot is on the floor

## Shooting

### Set Shot

- Square hips and shoulders to basket
- Balanced position
- One hand shoots, one hand guides
- Shooting elbow is in line with shoulder
- Follow through

### Jump Shot

- Shot at the top of a jump

### Lay Up

- One hand short range shot
- High speed
- Recommended to use the backboard

## Passing

### Bounce Pass

- Used when guarded close
    - Gets the ball around opponent
- Bounce the ball 3/4 of the way to receiver

### Chest Pass

- Thrown from chest with both hands
- Open passing lane

### Baseball Pass

- Gets ball up court quickly

## Rebounding

- Regaining possession of the ball after an attempted shot
- Correct position, Hands up, and timed jump

## Screen

- Offensive maneuver
- Player is between defender and teammate to free the teammate

## Give and Go

- Offensive player passes to teammate
- Player comes back to a return pass to the basket

# Positions

<aside>
<img src="/icons/basketball_gray.svg" alt="/icons/basketball_gray.svg" width="40px" />

There are typically **5** players in a basketball game.

</aside>

- **Center:** tallest player, can play with back to basket, rebounds well
- **Forward:** tall players, dribble and shoot from distance
- **Point Guard:** dribbling, passing, and shooting, lead up the teammates to score

# The Basketball Court

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/443018a8-2fd9-450f-b1ab-6a1a85a90a40/82cf6c7d-8177-45a4-a55b-2149222dfdde/image.png)

1. Sideline
2. Endline

1. Jumpball Circle
2. Lane

1. Three Point Arc
2. Free Throw Line

1. Free Throw Circle
2. Mid Court Line

# Violations

<aside>
<img src="/icons/report_gray.svg" alt="/icons/report_gray.svg" width="40px" />

If a violation occurs, the ball is given to the other team.

</aside>

- **Traveling:** moving both feet while holding the ball
- **Double Dribble:** dribbling the ball after stopping / using two hands to dribble
- Kicking the ball
- **Three-Second Rule:** offensive players cannot stand in the lane
- Stepping on the endline or sideline
- **Carry:** placing your hand under the ball
- Making the ball go out of bounds

## Fouls

- **Charging:** offensive player contacts a defensive player who is standing still
- **Shooting:** contacting a player’s body during shooting
- **Blocking:** contacting a player that stops their movement
- Pushing, holding, tripping

# Scoring

**3 Points:** any basket outside the three-point arc

**2 Points:** any basket inside the three-point arc

**1 Point:** any basket during a free throw

# CVHS Half Court Rules

**Person-to-Person Defense**: one person guards one person and can’t move

**Check:** bounce pass to the defense and back to the offense to signal readiness

- Ball must be passed / dribbled outside the three-point line when possession changes
- **NO** free throws
- No double/triple teaming an opponent
- Self-refereed games with good sportsmanship
- **2 points** outside the three-point arc and **1 point** inside

--- COMPUUTER SCIENCE 1 ---
(Computer Systems)
**Input:** tells the computer what to do

**Memory:** stores information

**Output:** shows what the computer has done

- Shows information processed from memory by microprocessor

## Microprocessors

**Registers:** memory devices in the microprocessors that store data

- Too small to show in CPU

**Central Processing Unit (CPU):** “brain” of the computer

- **Arithmetic & Logic Unit (ALU)**
- **Control Unit**

The ALU performs *addition* and *logical comparisons*.

Example of the **flow of data**:

```mermaid
graph TD
  Input --> Memory
  Memory --> |Microprocessor| Register
  Register --> |CPU| ALU
  ALU --> Control.Unit --> Output
  Memory --> Output
```

## Input & Output Devices

Examples of input and output devices:

| **Input Devices** | **Output Devices** |
| --- | --- |
| keyboard | monitor |
| microphone | projector |
| mouse | printer |
| camera | speaker |
| remote control (R.C.) | headphones |

**Peripheral Devices:** input & output devices

- Devices outside of the actual computer

## Memory Devices

Memory devices are **NOT** peripheral.

## Non-Volatile Memory Devices

- Retained when computer is shut down
- Slower to access

1. Hard Drive (HD)
    - Uses electromagnetic means to store data (revolving disk)
2. CD / DVD / BlueRay / Disks
    - Optical
    - Structured with lasers
3. Flash Drives
    - Use small flat chips inside the drive
4. ROM (Read-Only Memory)
    - Embedded in the motherboard
    - Used for boots
    - Firmware (not software application)

The *Electrically-Erasable Programmable Read-Only Memory (EEPROM)* is a version of ROM that can be programmed.

### Computer Boots

**Basic Input Output System (BIOS):** old version, checks to make sure that peripheral devices are attached

**Universal Extensive Firmware Interface (UEFI):** newer version, doesn’t require peripheral devices (replaced BIOS)

## Volatile Memory Devices

- Reset when computer is shut down
- Faster to access

1. Random Access Memory (RAM)
    - Main memory that the microprocessor uses

<aside>
<img src="/icons/fire_gray.svg" alt="/icons/fire_gray.svg" width="40px" /> In a smaller area, current gets heated up.

</aside>

# History of Computer Technology

**Electronic Numerical Integrator and Computer (ENIAC):** first generally-recognized computer 

- Moore School of Electrical Engineering at the University of Pennsylvania
- First high-speed, purely electronic digital computer that could be programmed and reprogrammed to handle tasks

ENIAC’s main jobs were:

- Calculate artillery firing tables for the US Army
- Make atomic energy calculations
- Predict the weather

ENIAC was superior to other machines because it could be *reprogrammed*.

- Reprogramming was a difficult process
    - Required women to manually change the (over 3000) switches on the ENIAC

## Advent of Microprocessors

Dr. John von Neumann → advanced the idea of the **stored-program** computer

- Data stored in memory could be changed by a computer
- The program could also be stored in the computer

**von Neumann Architecture:** the art of storing a program in memory

1. Vacuum tubes were used
2. The transistor solved this problem.
    - **Transistor:** a semiconductor device used to amplify or switch electrical signals
        - Smaller, cooler, and more reliable that vacuum tubes
        - Allowed for mass production
3. Transistors were combined with other components to create the **integrated circuit**
4. Integrated circuits evolved into **microprocessors** used today
    - Gotten smaller, faster, and more powerful

# Computers of Today

Gordon Moore helped to advanced transistor technology.

- Co-founded the Intel Corporation
- Made a prediction on transistor usage in same-size boards

**Moore’s Law:** the number of cheaply-placed transistors within the same physical area would *double about every two years*

- Accurate to future trends

<aside>
<img src="/icons/computer-chip_gray.svg" alt="/icons/computer-chip_gray.svg" width="40px" /> **Semiconductor:** a substance used to amplify or switch electronic signals

</aside>

<aside>
<img src="/icons/electric-plug_gray.svg" alt="/icons/electric-plug_gray.svg" width="40px" /> **Circuit Board:** a sheet of insulating material used for the mounting and interconnection of components in electronic equipment

</aside>

**Programming:** giving commands to a computer

# Method Format

<aside>
<img src="/icons/cash-register_gray.svg" alt="/icons/cash-register_gray.svg" width="40px" />

**Methods** are *commands*.

</aside>

- No spaces
- camelCase
- Ends with `();`

**Example of a Method:**

```java
commandName();
```

When using methods, they must match the **EXACT** spelling.

(Number Systems & Data Types)
NUMBER SYSTEM	# OF SYMBOLS	SYMBOLS USED
Unary	1	0
Binary	2	0, 1
Ternary	3	0, 1, 2
Octal	8	0 → 7
Decimal	10	0 → 9
Undecimal	11	0 → 9, A
Duodecimal	12	0 → 9, A, B
Hexadecimal	16	0 → 9, A, B, C, D, E, F

<aside>
<img src="/icons/mathematics_gray.svg" alt="/icons/mathematics_gray.svg" width="40px" /> If the number isn’t in base 10, always put the subscript for the base.

</aside>

The largest symbol used is always 1 less than the number of symbols.

- When the number exceeds 9, start using alphabets. (A = 10, B = 11, etc.)

**Bit** = binary digit

- **Byte** = 8 bits
- **Nibble** = 4 bits

## Expanded Notation

342₁₀ = 3 × 10² + 4 × 10¹ + 2 × 10⁰

<aside>
<img src="/icons/chart-line_gray.svg" alt="/icons/chart-line_gray.svg" width="40px" /> The maximum value of a set of bits is *2^(# of bits) - 1*.

</aside>

The part before the decimal point is the **integral** part

The part before the decimal point is the **fractional** point.

<aside>
<img src="/icons/new-alert_gray.svg" alt="/icons/new-alert_gray.svg" width="40px" /> Make sure that when you stop dividing, the number is less than the base.

</aside>

- Make sure which place value you are rounding to.

For *binary*, *quaternary*, *octal*, and *hex*, you can use a shortcut to get the values faster.

- Binary = 2^1
- Quarternary (4) = 2^2
- Octal (8) = 2^3
- Hexadecimal = 2^16

Make subsets of those values and convert to binary.

# Integers

**Byte** → 8 bits

- Shortest type of data

**Short** → 16 bits

**Int** → 32 bits

**Long** → 64 bits (25L, 303928289L, etc.)

**Char** → 16 bits (’A’, ‘B’, etc.)

# Floating Point Numbers

**Float** → decimal (2.5F, 3.222F, etc.)

**Double** → also decimals

# Boolean Expressions

**Boolean** → 8 bits

- Only uses the last bit

<aside>
<img src="/icons/sync-reverse_gray.svg" alt="/icons/sync-reverse_gray.svg" width="40px" />

If you exceed the limit of a data type, it will fold back over to the other side.

</aside>

- **Limit of a Data Type:** [-2^x, 2^x - 1]
    - *x* → # of bits

(Java Basics)
<aside>
<img src="/icons/calculator_gray.svg" alt="/icons/calculator_gray.svg" width="40px" /> An integer divided by an integer is **ALWAYS AN INTEGER**.

</aside>

# Process for Coding

1. Find the **FORMULA**
2. **WRITE** the inputs
3. Process the data
4. Print result

Code should look like:

```java
//input:

//process:

//output:

```

`//` indicates a comment.

Methods are **OUTSIDE OF** the main method.

How to create a method:

```java
public static returnType name(type parameters) {
	return parameters;
}
```

- **returnType** → data type the *return value* will be in

**Methods help in …**

- Reusing operations
- Shortening main code

(String Methods)
Module java.base
Package java.lang
Class String
java.lang.Object
java.lang.String
All Implemented Interfaces:
Serializable, CharSequence, Comparable<String>
public final class String
extends Object
implements Serializable, Comparable<String>, CharSequence
The String class represents character strings. All string literals in Java programs, such as "abc", are implemented as instances of this class.
Strings are constant; their values cannot be changed after they are created. String buffers support mutable strings. Because String objects are immutable they can be shared. For example:

     String str = "abc";
 
is equivalent to:

     char data[] = {'a', 'b', 'c'};
     String str = new String(data);
 
Here are some more examples of how strings can be used:

     System.out.println("abc");
     String cde = "cde";
     System.out.println("abc" + cde);
     String c = "abc".substring(2,3);
     String d = cde.substring(1, 2);
 
The class String includes methods for examining individual characters of the sequence, for comparing strings, for searching strings, for extracting substrings, and for creating a copy of a string with all characters translated to uppercase or to lowercase. Case mapping is based on the Unicode Standard version specified by the Character class.

The Java language provides special support for the string concatenation operator ( + ), and for conversion of other objects to strings. For additional information on string concatenation and conversion, see The Java™ Language Specification.

Unless otherwise noted, passing a null argument to a constructor or method in this class will cause a NullPointerException to be thrown.

A String represents a string in the UTF-16 format in which supplementary characters are represented by surrogate pairs (see the section Unicode Character Representations in the Character class for more information). Index values refer to char code units, so a supplementary character uses two positions in a String.

The String class provides methods for dealing with Unicode code points (i.e., characters), in addition to those for dealing with Unicode code units (i.e., char values).

Unless otherwise noted, methods for comparing Strings do not take locale into account. The Collator class provides methods for finer-grain, locale-sensitive String comparison.

Implementation Note:
The implementation of the string concatenation operator is left to the discretion of a Java compiler, as long as the compiler ultimately conforms to The Java™ Language Specification. For example, the javac compiler may implement the operator with StringBuffer, StringBuilder, or java.lang.invoke.StringConcatFactory depending on the JDK version. The implementation of string conversion is typically through the method toString, defined by Object and inherited by all classes in Java.
Since:
1.0
See Also:
Object.toString(), StringBuffer, StringBuilder, Charset, Serialized Form
See The Java™ Language Specification:
15.18.1 String Concatenation Operator +
Field Summary
Fields
Modifier and Type	Field	Description
static Comparator<String>	CASE_INSENSITIVE_ORDER	
A Comparator that orders String objects as by compareToIgnoreCase.
Constructor Summary
Constructors
Constructor	Description
String()	
Initializes a newly created String object so that it represents an empty character sequence.
String​(byte[] bytes)	
Constructs a new String by decoding the specified array of bytes using the platform's default charset.
String​(byte[] ascii, int hibyte)	
Deprecated.
This method does not properly convert bytes into characters.
String​(byte[] bytes, int offset, int length)	
Constructs a new String by decoding the specified subarray of bytes using the platform's default charset.
String​(byte[] ascii, int hibyte, int offset, int count)	
Deprecated.
This method does not properly convert bytes into characters.
String​(byte[] bytes, int offset, int length, String charsetName)	
Constructs a new String by decoding the specified subarray of bytes using the specified charset.
String​(byte[] bytes, int offset, int length, Charset charset)	
Constructs a new String by decoding the specified subarray of bytes using the specified charset.
String​(byte[] bytes, String charsetName)	
Constructs a new String by decoding the specified array of bytes using the specified charset.
String​(byte[] bytes, Charset charset)	
Constructs a new String by decoding the specified array of bytes using the specified charset.
String​(char[] value)	
Allocates a new String so that it represents the sequence of characters currently contained in the character array argument.
String​(char[] value, int offset, int count)	
Allocates a new String that contains characters from a subarray of the character array argument.
String​(int[] codePoints, int offset, int count)	
Allocates a new String that contains characters from a subarray of the Unicode code point array argument.
String​(String original)	
Initializes a newly created String object so that it represents the same sequence of characters as the argument; in other words, the newly created string is a copy of the argument string.
String​(StringBuffer buffer)	
Allocates a new string that contains the sequence of characters currently contained in the string buffer argument.
String​(StringBuilder builder)	
Allocates a new string that contains the sequence of characters currently contained in the string builder argument.
Method Summary
All MethodsStatic MethodsInstance MethodsConcrete MethodsDeprecated Methods
Modifier and Type	Method	Description
char	charAt​(int index)	
Returns the char value at the specified index.
IntStream	chars()	
Returns a stream of int zero-extending the char values from this sequence.
int	codePointAt​(int index)	
Returns the character (Unicode code point) at the specified index.
int	codePointBefore​(int index)	
Returns the character (Unicode code point) before the specified index.
int	codePointCount​(int beginIndex, int endIndex)	
Returns the number of Unicode code points in the specified text range of this String.
IntStream	codePoints()	
Returns a stream of code point values from this sequence.
int	compareTo​(String anotherString)	
Compares two strings lexicographically.
int	compareToIgnoreCase​(String str)	
Compares two strings lexicographically, ignoring case differences.
String	concat​(String str)	
Concatenates the specified string to the end of this string.
boolean	contains​(CharSequence s)	
Returns true if and only if this string contains the specified sequence of char values.
boolean	contentEquals​(CharSequence cs)	
Compares this string to the specified CharSequence.
boolean	contentEquals​(StringBuffer sb)	
Compares this string to the specified StringBuffer.
static String	copyValueOf​(char[] data)	
Equivalent to valueOf(char[]).
static String	copyValueOf​(char[] data, int offset, int count)	
Equivalent to valueOf(char[], int, int).
boolean	endsWith​(String suffix)	
Tests if this string ends with the specified suffix.
boolean	equals​(Object anObject)	
Compares this string to the specified object.
boolean	equalsIgnoreCase​(String anotherString)	
Compares this String to another String, ignoring case considerations.
static String	format​(String format, Object... args)	
Returns a formatted string using the specified format string and arguments.
static String	format​(Locale l, String format, Object... args)	
Returns a formatted string using the specified locale, format string, and arguments.
byte[]	getBytes()	
Encodes this String into a sequence of bytes using the platform's default charset, storing the result into a new byte array.
void	getBytes​(int srcBegin, int srcEnd, byte[] dst, int dstBegin)	
Deprecated.
This method does not properly convert characters into bytes.
byte[]	getBytes​(String charsetName)	
Encodes this String into a sequence of bytes using the named charset, storing the result into a new byte array.
byte[]	getBytes​(Charset charset)	
Encodes this String into a sequence of bytes using the given charset, storing the result into a new byte array.
void	getChars​(int srcBegin, int srcEnd, char[] dst, int dstBegin)	
Copies characters from this string into the destination character array.
int	hashCode()	
Returns a hash code for this string.
int	indexOf​(int ch)	
Returns the index within this string of the first occurrence of the specified character.
int	indexOf​(int ch, int fromIndex)	
Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index.
int	indexOf​(String str)	
Returns the index within this string of the first occurrence of the specified substring.
int	indexOf​(String str, int fromIndex)	
Returns the index within this string of the first occurrence of the specified substring, starting at the specified index.
String	intern()	
Returns a canonical representation for the string object.
boolean	isBlank()	
Returns true if the string is empty or contains only white space codepoints, otherwise false.
boolean	isEmpty()	
Returns true if, and only if, length() is 0.
static String	join​(CharSequence delimiter, CharSequence... elements)	
Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter.
static String	join​(CharSequence delimiter, Iterable<? extends CharSequence> elements)	
Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter.
int	lastIndexOf​(int ch)	
Returns the index within this string of the last occurrence of the specified character.
int	lastIndexOf​(int ch, int fromIndex)	
Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index.
int	lastIndexOf​(String str)	
Returns the index within this string of the last occurrence of the specified substring.
int	lastIndexOf​(String str, int fromIndex)	
Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index.
int	length()	
Returns the length of this string.
Stream<String>	lines()	
Returns a stream of lines extracted from this string, separated by line terminators.
boolean	matches​(String regex)	
Tells whether or not this string matches the given regular expression.
int	offsetByCodePoints​(int index, int codePointOffset)	
Returns the index within this String that is offset from the given index by codePointOffset code points.
boolean	regionMatches​(boolean ignoreCase, int toffset, String other, int ooffset, int len)	
Tests if two string regions are equal.
boolean	regionMatches​(int toffset, String other, int ooffset, int len)	
Tests if two string regions are equal.
String	repeat​(int count)	
Returns a string whose value is the concatenation of this string repeated count times.
String	replace​(char oldChar, char newChar)	
Returns a string resulting from replacing all occurrences of oldChar in this string with newChar.
String	replace​(CharSequence target, CharSequence replacement)	
Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence.
String	replaceAll​(String regex, String replacement)	
Replaces each substring of this string that matches the given regular expression with the given replacement.
String	replaceFirst​(String regex, String replacement)	
Replaces the first substring of this string that matches the given regular expression with the given replacement.
String[]	split​(String regex)	
Splits this string around matches of the given regular expression.
String[]	split​(String regex, int limit)	
Splits this string around matches of the given regular expression.
boolean	startsWith​(String prefix)	
Tests if this string starts with the specified prefix.
boolean	startsWith​(String prefix, int toffset)	
Tests if the substring of this string beginning at the specified index starts with the specified prefix.
String	strip()	
Returns a string whose value is this string, with all leading and trailing white space removed.
String	stripLeading()	
Returns a string whose value is this string, with all leading white space removed.
String	stripTrailing()	
Returns a string whose value is this string, with all trailing white space removed.
CharSequence	subSequence​(int beginIndex, int endIndex)	
Returns a character sequence that is a subsequence of this sequence.
String	substring​(int beginIndex)	
Returns a string that is a substring of this string.
String	substring​(int beginIndex, int endIndex)	
Returns a string that is a substring of this string.
char[]	toCharArray()	
Converts this string to a new character array.
String	toLowerCase()	
Converts all of the characters in this String to lower case using the rules of the default locale.
String	toLowerCase​(Locale locale)	
Converts all of the characters in this String to lower case using the rules of the given Locale.
String	toString()	
This object (which is already a string!)
String	toUpperCase()	
Converts all of the characters in this String to upper case using the rules of the default locale.
String	toUpperCase​(Locale locale)	
Converts all of the characters in this String to upper case using the rules of the given Locale.
String	trim()	
Returns a string whose value is this string, with all leading and trailing space removed, where space is defined as any character whose codepoint is less than or equal to 'U+0020' (the space character).
static String	valueOf​(boolean b)	
Returns the string representation of the boolean argument.
static String	valueOf​(char c)	
Returns the string representation of the char argument.
static String	valueOf​(char[] data)	
Returns the string representation of the char array argument.
static String	valueOf​(char[] data, int offset, int count)	
Returns the string representation of a specific subarray of the char array argument.
static String	valueOf​(double d)	
Returns the string representation of the double argument.
static String	valueOf​(float f)	
Returns the string representation of the float argument.
static String	valueOf​(int i)	
Returns the string representation of the int argument.
static String	valueOf​(long l)	
Returns the string representation of the long argument.
static String	valueOf​(Object obj)	
Returns the string representation of the Object argument.
Methods declared in class java.lang.Object
clone, finalize, getClass, notify, notifyAll, wait, wait, wait
Field Detail
CASE_INSENSITIVE_ORDER
public static final Comparator<String> CASE_INSENSITIVE_ORDER
A Comparator that orders String objects as by compareToIgnoreCase. This comparator is serializable.
Note that this Comparator does not take locale into account, and will result in an unsatisfactory ordering for certain locales. The Collator class provides locale-sensitive comparison.

Since:
1.2
See Also:
Collator
Constructor Detail
String
public String()
Initializes a newly created String object so that it represents an empty character sequence. Note that use of this constructor is unnecessary since Strings are immutable.
String
public String​(String original)
Initializes a newly created String object so that it represents the same sequence of characters as the argument; in other words, the newly created string is a copy of the argument string. Unless an explicit copy of original is needed, use of this constructor is unnecessary since Strings are immutable.
Parameters:
original - A String
String
public String​(char[] value)
Allocates a new String so that it represents the sequence of characters currently contained in the character array argument. The contents of the character array are copied; subsequent modification of the character array does not affect the newly created string.
Parameters:
value - The initial value of the string
String
public String​(char[] value,
              int offset,
              int count)
Allocates a new String that contains characters from a subarray of the character array argument. The offset argument is the index of the first character of the subarray and the count argument specifies the length of the subarray. The contents of the subarray are copied; subsequent modification of the character array does not affect the newly created string.
Parameters:
value - Array that is the source of characters
offset - The initial offset
count - The length
Throws:
IndexOutOfBoundsException - If offset is negative, count is negative, or offset is greater than value.length - count
String
public String​(int[] codePoints,
              int offset,
              int count)
Allocates a new String that contains characters from a subarray of the Unicode code point array argument. The offset argument is the index of the first code point of the subarray and the count argument specifies the length of the subarray. The contents of the subarray are converted to chars; subsequent modification of the int array does not affect the newly created string.
Parameters:
codePoints - Array that is the source of Unicode code points
offset - The initial offset
count - The length
Throws:
IllegalArgumentException - If any invalid Unicode code point is found in codePoints
IndexOutOfBoundsException - If offset is negative, count is negative, or offset is greater than codePoints.length - count
Since:
1.5
String
@Deprecated(since="1.1")
public String​(byte[] ascii,
              int hibyte,
              int offset,
              int count)
Deprecated.
This method does not properly convert bytes into characters. As of JDK 1.1, the preferred way to do this is via the String constructors that take a Charset, charset name, or that use the platform's default charset.
Allocates a new String constructed from a subarray of an array of 8-bit integer values.
The offset argument is the index of the first byte of the subarray, and the count argument specifies the length of the subarray.

Each byte in the subarray is converted to a char as specified in the String(byte[],int) constructor.

Parameters:
ascii - The bytes to be converted to characters
hibyte - The top 8 bits of each 16-bit Unicode code unit
offset - The initial offset
count - The length
Throws:
IndexOutOfBoundsException - If offset is negative, count is negative, or offset is greater than ascii.length - count
See Also:
String(byte[], int), String(byte[], int, int, java.lang.String), String(byte[], int, int, java.nio.charset.Charset), String(byte[], int, int), String(byte[], java.lang.String), String(byte[], java.nio.charset.Charset), String(byte[])
String
@Deprecated(since="1.1")
public String​(byte[] ascii,
              int hibyte)
Deprecated.
This method does not properly convert bytes into characters. As of JDK 1.1, the preferred way to do this is via the String constructors that take a Charset, charset name, or that use the platform's default charset.
Allocates a new String containing characters constructed from an array of 8-bit integer values. Each character c in the resulting string is constructed from the corresponding component b in the byte array such that:
     c == (char)(((hibyte & 0xff) << 8)
                         | (b & 0xff))
 
Parameters:
ascii - The bytes to be converted to characters
hibyte - The top 8 bits of each 16-bit Unicode code unit
See Also:
String(byte[], int, int, java.lang.String), String(byte[], int, int, java.nio.charset.Charset), String(byte[], int, int), String(byte[], java.lang.String), String(byte[], java.nio.charset.Charset), String(byte[])
String
public String​(byte[] bytes,
              int offset,
              int length,
              String charsetName)
       throws UnsupportedEncodingException
Constructs a new String by decoding the specified subarray of bytes using the specified charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the subarray.
The behavior of this constructor when the given bytes are not valid in the given charset is unspecified. The CharsetDecoder class should be used when more control over the decoding process is required.

Parameters:
bytes - The bytes to be decoded into characters
offset - The index of the first byte to decode
length - The number of bytes to decode
charsetName - The name of a supported charset
Throws:
UnsupportedEncodingException - If the named charset is not supported
IndexOutOfBoundsException - If offset is negative, length is negative, or offset is greater than bytes.length - length
Since:
1.1
String
public String​(byte[] bytes,
              int offset,
              int length,
              Charset charset)
Constructs a new String by decoding the specified subarray of bytes using the specified charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the subarray.
This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement string. The CharsetDecoder class should be used when more control over the decoding process is required.

Parameters:
bytes - The bytes to be decoded into characters
offset - The index of the first byte to decode
length - The number of bytes to decode
charset - The charset to be used to decode the bytes
Throws:
IndexOutOfBoundsException - If offset is negative, length is negative, or offset is greater than bytes.length - length
Since:
1.6
String
public String​(byte[] bytes,
              String charsetName)
       throws UnsupportedEncodingException
Constructs a new String by decoding the specified array of bytes using the specified charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the byte array.
The behavior of this constructor when the given bytes are not valid in the given charset is unspecified. The CharsetDecoder class should be used when more control over the decoding process is required.

Parameters:
bytes - The bytes to be decoded into characters
charsetName - The name of a supported charset
Throws:
UnsupportedEncodingException - If the named charset is not supported
Since:
1.1
String
public String​(byte[] bytes,
              Charset charset)
Constructs a new String by decoding the specified array of bytes using the specified charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the byte array.
This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement string. The CharsetDecoder class should be used when more control over the decoding process is required.

Parameters:
bytes - The bytes to be decoded into characters
charset - The charset to be used to decode the bytes
Since:
1.6
String
public String​(byte[] bytes,
              int offset,
              int length)
Constructs a new String by decoding the specified subarray of bytes using the platform's default charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the subarray.
The behavior of this constructor when the given bytes are not valid in the default charset is unspecified. The CharsetDecoder class should be used when more control over the decoding process is required.

Parameters:
bytes - The bytes to be decoded into characters
offset - The index of the first byte to decode
length - The number of bytes to decode
Throws:
IndexOutOfBoundsException - If offset is negative, length is negative, or offset is greater than bytes.length - length
Since:
1.1
String
public String​(byte[] bytes)
Constructs a new String by decoding the specified array of bytes using the platform's default charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the byte array.
The behavior of this constructor when the given bytes are not valid in the default charset is unspecified. The CharsetDecoder class should be used when more control over the decoding process is required.

Parameters:
bytes - The bytes to be decoded into characters
Since:
1.1
String
public String​(StringBuffer buffer)
Allocates a new string that contains the sequence of characters currently contained in the string buffer argument. The contents of the string buffer are copied; subsequent modification of the string buffer does not affect the newly created string.
Parameters:
buffer - A StringBuffer
String
public String​(StringBuilder builder)
Allocates a new string that contains the sequence of characters currently contained in the string builder argument. The contents of the string builder are copied; subsequent modification of the string builder does not affect the newly created string.
This constructor is provided to ease migration to StringBuilder. Obtaining a string from a string builder via the toString method is likely to run faster and is generally preferred.

Parameters:
builder - A StringBuilder
Since:
1.5
Method Detail
length
public int length()
Returns the length of this string. The length is equal to the number of Unicode code units in the string.
Specified by:
length in interface CharSequence
Returns:
the length of the sequence of characters represented by this object.
isEmpty
public boolean isEmpty()
Returns true if, and only if, length() is 0.
Returns:
true if length() is 0, otherwise false
Since:
1.6
charAt
public char charAt​(int index)
Returns the char value at the specified index. An index ranges from 0 to length() - 1. The first char value of the sequence is at index 0, the next at index 1, and so on, as for array indexing.
If the char value specified by the index is a surrogate, the surrogate value is returned.

Specified by:
charAt in interface CharSequence
Parameters:
index - the index of the char value.
Returns:
the char value at the specified index of this string. The first char value is at index 0.
Throws:
IndexOutOfBoundsException - if the index argument is negative or not less than the length of this string.
codePointAt
public int codePointAt​(int index)
Returns the character (Unicode code point) at the specified index. The index refers to char values (Unicode code units) and ranges from 0 to length() - 1.
If the char value specified at the given index is in the high-surrogate range, the following index is less than the length of this String, and the char value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at the given index is returned.

Parameters:
index - the index to the char values
Returns:
the code point value of the character at the index
Throws:
IndexOutOfBoundsException - if the index argument is negative or not less than the length of this string.
Since:
1.5
codePointBefore
public int codePointBefore​(int index)
Returns the character (Unicode code point) before the specified index. The index refers to char values (Unicode code units) and ranges from 1 to length.
If the char value at (index - 1) is in the low-surrogate range, (index - 2) is not negative, and the char value at (index - 2) is in the high-surrogate range, then the supplementary code point value of the surrogate pair is returned. If the char value at index - 1 is an unpaired low-surrogate or a high-surrogate, the surrogate value is returned.

Parameters:
index - the index following the code point that should be returned
Returns:
the Unicode code point value before the given index.
Throws:
IndexOutOfBoundsException - if the index argument is less than 1 or greater than the length of this string.
Since:
1.5
codePointCount
public int codePointCount​(int beginIndex, int endIndex)
Returns the number of Unicode code points in the specified text range of this String. The text range begins at the specified beginIndex and extends to the char at index endIndex - 1. Thus the length (in chars) of the text range is endIndex-beginIndex. Unpaired surrogates within the text range count as one code point each.
Parameters:
beginIndex - the index to the first char of the text range.
endIndex - the index after the last char of the text range.
Returns:
the number of Unicode code points in the specified text range
Throws:
IndexOutOfBoundsException - if the beginIndex is negative, or endIndex is larger than the length of this String, or beginIndex is larger than endIndex.
Since:
1.5
offsetByCodePoints
public int offsetByCodePoints​(int index, int codePointOffset)
Returns the index within this String that is offset from the given index by codePointOffset code points. Unpaired surrogates within the text range given by index and codePointOffset count as one code point each.
Parameters:
index - the index to be offset
codePointOffset - the offset in code points
Returns:
the index within this String
Throws:
IndexOutOfBoundsException - if index is negative or larger then the length of this String, or if codePointOffset is positive and the substring starting with index has fewer than codePointOffset code points, or if codePointOffset is negative and the substring before index has fewer than the absolute value of codePointOffset code points.
Since:
1.5
getChars
public void getChars​(int srcBegin, int srcEnd, char[] dst, int dstBegin)
Copies characters from this string into the destination character array.
The first character to be copied is at index srcBegin; the last character to be copied is at index srcEnd-1 (thus the total number of characters to be copied is srcEnd-srcBegin). The characters are copied into the subarray of dst starting at index dstBegin and ending at index:

     dstBegin + (srcEnd-srcBegin) - 1
 
Parameters:
srcBegin - index of the first character in the string to copy.
srcEnd - index after the last character in the string to copy.
dst - the destination array.
dstBegin - the start offset in the destination array.
Throws:
IndexOutOfBoundsException - If any of the following is true:
srcBegin is negative.
srcBegin is greater than srcEnd
srcEnd is greater than the length of this string
dstBegin is negative
dstBegin+(srcEnd-srcBegin) is larger than dst.length
getBytes
@Deprecated(since="1.1") public void getBytes​(int srcBegin, int srcEnd, byte[] dst, int dstBegin)
Deprecated.
This method does not properly convert characters into bytes. As of JDK 1.1, the preferred way to do this is via the getBytes() method, which uses the platform's default charset.
Copies characters from this string into the destination byte array. Each byte receives the 8 low-order bits of the corresponding character. The eight high-order bits of each character are not copied and do not participate in the transfer in any way.
The first character to be copied is at index srcBegin; the last character to be copied is at index srcEnd-1. The total number of characters to be copied is srcEnd-srcBegin. The characters, converted to bytes, are copied into the subarray of dst starting at index dstBegin and ending at index:

     dstBegin + (srcEnd-srcBegin) - 1
 
Parameters:
srcBegin - Index of the first character in the string to copy
srcEnd - Index after the last character in the string to copy
dst - The destination array
dstBegin - The start offset in the destination array
Throws:
IndexOutOfBoundsException - If any of the following is true:
srcBegin is negative
srcBegin is greater than srcEnd
srcEnd is greater than the length of this String
dstBegin is negative
dstBegin+(srcEnd-srcBegin) is larger than dst.length
getBytes
public byte[] getBytes​(String charsetName) throws UnsupportedEncodingException
Encodes this String into a sequence of bytes using the named charset, storing the result into a new byte array.
The behavior of this method when this string cannot be encoded in the given charset is unspecified. The CharsetEncoder class should be used when more control over the encoding process is required.

Parameters:
charsetName - The name of a supported charset
Returns:
The resultant byte array
Throws:
UnsupportedEncodingException - If the named charset is not supported
Since:
1.1
getBytes
public byte[] getBytes​(Charset charset)
Encodes this String into a sequence of bytes using the given charset, storing the result into a new byte array.
This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement byte array. The CharsetEncoder class should be used when more control over the encoding process is required.

Parameters:
charset - The Charset to be used to encode the String
Returns:
The resultant byte array
Since:
1.6
getBytes
public byte[] getBytes()
Encodes this String into a sequence of bytes using the platform's default charset, storing the result into a new byte array.
The behavior of this method when this string cannot be encoded in the default charset is unspecified. The CharsetEncoder class should be used when more control over the encoding process is required.

Returns:
The resultant byte array
Since:
1.1
equals
public boolean equals​(Object anObject)
Compares this string to the specified object. The result is true if and only if the argument is not null and is a String object that represents the same sequence of characters as this object.
For finer-grained String comparison, refer to Collator.

Overrides:
equals in class Object
Parameters:
anObject - The object to compare this String against
Returns:
true if the given object represents a String equivalent to this string, false otherwise
See Also:
compareTo(String), equalsIgnoreCase(String)
contentEquals
public boolean contentEquals​(StringBuffer sb)
Compares this string to the specified StringBuffer. The result is true if and only if this String represents the same sequence of characters as the specified StringBuffer. This method synchronizes on the StringBuffer.
For finer-grained String comparison, refer to Collator.

Parameters:
sb - The StringBuffer to compare this String against
Returns:
true if this String represents the same sequence of characters as the specified StringBuffer, false otherwise
Since:
1.4
contentEquals
public boolean contentEquals​(CharSequence cs)
Compares this string to the specified CharSequence. The result is true if and only if this String represents the same sequence of char values as the specified sequence. Note that if the CharSequence is a StringBuffer then the method synchronizes on it.
For finer-grained String comparison, refer to Collator.

Parameters:
cs - The sequence to compare this String against
Returns:
true if this String represents the same sequence of char values as the specified sequence, false otherwise
Since:
1.5
equalsIgnoreCase
public boolean equalsIgnoreCase​(String anotherString)
Compares this String to another String, ignoring case considerations. Two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case.
Two characters c1 and c2 are considered the same ignoring case if at least one of the following is true:

The two characters are the same (as compared by the == operator)
Calling Character.toLowerCase(Character.toUpperCase(char)) on each character produces the same result
Note that this method does not take locale into account, and will result in unsatisfactory results for certain locales. The Collator class provides locale-sensitive comparison.

Parameters:
anotherString - The String to compare this String against
Returns:
true if the argument is not null and it represents an equivalent String ignoring case; false otherwise
See Also:
equals(Object)
compareTo
public int compareTo​(String anotherString)
Compares two strings lexicographically. The comparison is based on the Unicode value of each character in the strings. The character sequence represented by this String object is compared lexicographically to the character sequence represented by the argument string. The result is a negative integer if this String object lexicographically precedes the argument string. The result is a positive integer if this String object lexicographically follows the argument string. The result is zero if the strings are equal; compareTo returns 0 exactly when the equals(Object) method would return true.
This is the definition of lexicographic ordering. If two strings are different, then either they have different characters at some index that is a valid index for both strings, or their lengths are different, or both. If they have different characters at one or more index positions, let k be the smallest such index; then the string whose character at position k has the smaller value, as determined by using the < operator, lexicographically precedes the other string. In this case, compareTo returns the difference of the two character values at position k in the two string -- that is, the value:

 this.charAt(k)-anotherString.charAt(k)
 
If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string. In this case, compareTo returns the difference of the lengths of the strings -- that is, the value:
 this.length()-anotherString.length()
 
For finer-grained String comparison, refer to Collator.

Specified by:
compareTo in interface Comparable<String>
Parameters:
anotherString - the String to be compared.
Returns:
the value 0 if the argument string is equal to this string; a value less than 0 if this string is lexicographically less than the string argument; and a value greater than 0 if this string is lexicographically greater than the string argument.
compareToIgnoreCase
public int compareToIgnoreCase​(String str)
Compares two strings lexicographically, ignoring case differences. This method returns an integer whose sign is that of calling compareTo with normalized versions of the strings where case differences have been eliminated by calling Character.toLowerCase(Character.toUpperCase(character)) on each character.
Note that this method does not take locale into account, and will result in an unsatisfactory ordering for certain locales. The Collator class provides locale-sensitive comparison.

Parameters:
str - the String to be compared.
Returns:
a negative integer, zero, or a positive integer as the specified String is greater than, equal to, or less than this String, ignoring case considerations.
Since:
1.2
See Also:
Collator
regionMatches
public boolean regionMatches​(int toffset, String other, int ooffset, int len)
Tests if two string regions are equal.
A substring of this String object is compared to a substring of the argument other. The result is true if these substrings represent identical character sequences. The substring of this String object to be compared begins at index toffset and has length len. The substring of other to be compared begins at index ooffset and has length len. The result is false if and only if at least one of the following is true:

toffset is negative.
ooffset is negative.
toffset+len is greater than the length of this String object.
ooffset+len is greater than the length of the other argument.
There is some nonnegative integer k less than len such that: this.charAt(toffset + k) != other.charAt(ooffset + k)
Note that this method does not take locale into account. The Collator class provides locale-sensitive comparison.

Parameters:
toffset - the starting offset of the subregion in this string.
other - the string argument.
ooffset - the starting offset of the subregion in the string argument.
len - the number of characters to compare.
Returns:
true if the specified subregion of this string exactly matches the specified subregion of the string argument; false otherwise.
regionMatches
public boolean regionMatches​(boolean ignoreCase, int toffset, String other, int ooffset, int len)
Tests if two string regions are equal.
A substring of this String object is compared to a substring of the argument other. The result is true if these substrings represent character sequences that are the same, ignoring case if and only if ignoreCase is true. The substring of this String object to be compared begins at index toffset and has length len. The substring of other to be compared begins at index ooffset and has length len. The result is false if and only if at least one of the following is true:

toffset is negative.
ooffset is negative.
toffset+len is greater than the length of this String object.
ooffset+len is greater than the length of the other argument.
ignoreCase is false and there is some nonnegative integer k less than len such that:
 this.charAt(toffset+k) != other.charAt(ooffset+k)
 
ignoreCase is true and there is some nonnegative integer k less than len such that:
 Character.toLowerCase(Character.toUpperCase(this.charAt(toffset+k))) !=
     Character.toLowerCase(Character.toUpperCase(other.charAt(ooffset+k)))
 
Note that this method does not take locale into account, and will result in unsatisfactory results for certain locales when ignoreCase is true. The Collator class provides locale-sensitive comparison.

Parameters:
ignoreCase - if true, ignore case when comparing characters.
toffset - the starting offset of the subregion in this string.
other - the string argument.
ooffset - the starting offset of the subregion in the string argument.
len - the number of characters to compare.
Returns:
true if the specified subregion of this string matches the specified subregion of the string argument; false otherwise. Whether the matching is exact or case insensitive depends on the ignoreCase argument.
startsWith
public boolean startsWith​(String prefix, int toffset)
Tests if the substring of this string beginning at the specified index starts with the specified prefix.
Parameters:
prefix - the prefix.
toffset - where to begin looking in this string.
Returns:
true if the character sequence represented by the argument is a prefix of the substring of this object starting at index toffset; false otherwise. The result is false if toffset is negative or greater than the length of this String object; otherwise the result is the same as the result of the expression
          this.substring(toffset).startsWith(prefix)
          
startsWith
public boolean startsWith​(String prefix)
Tests if this string starts with the specified prefix.
Parameters:
prefix - the prefix.
Returns:
true if the character sequence represented by the argument is a prefix of the character sequence represented by this string; false otherwise. Note also that true will be returned if the argument is an empty string or is equal to this String object as determined by the equals(Object) method.
Since:
1.0
endsWith
public boolean endsWith​(String suffix)
Tests if this string ends with the specified suffix.
Parameters:
suffix - the suffix.
Returns:
true if the character sequence represented by the argument is a suffix of the character sequence represented by this object; false otherwise. Note that the result will be true if the argument is the empty string or is equal to this String object as determined by the equals(Object) method.
hashCode
public int hashCode()
Returns a hash code for this string. The hash code for a String object is computed as
 s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]
 
using int arithmetic, where s[i] is the ith character of the string, n is the length of the string, and ^ indicates exponentiation. (The hash value of the empty string is zero.)
Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), System.identityHashCode(java.lang.Object)
indexOf
public int indexOf​(int ch)
Returns the index within this string of the first occurrence of the specified character. If a character with value ch occurs in the character sequence represented by this String object, then the index (in Unicode code units) of the first such occurrence is returned. For values of ch in the range from 0 to 0xFFFF (inclusive), this is the smallest value k such that:
 this.charAt(k) == ch
 
is true. For other values of ch, it is the smallest value k such that:
 this.codePointAt(k) == ch
 
is true. In either case, if no such character occurs in this string, then -1 is returned.
Parameters:
ch - a character (Unicode code point).
Returns:
the index of the first occurrence of the character in the character sequence represented by this object, or -1 if the character does not occur.
indexOf
public int indexOf​(int ch, int fromIndex)
Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index.
If a character with value ch occurs in the character sequence represented by this String object at an index no smaller than fromIndex, then the index of the first such occurrence is returned. For values of ch in the range from 0 to 0xFFFF (inclusive), this is the smallest value k such that:

 (this.charAt(k) == ch) && (k >= fromIndex)
 
is true. For other values of ch, it is the smallest value k such that:
 (this.codePointAt(k) == ch) && (k >= fromIndex)
 
is true. In either case, if no such character occurs in this string at or after position fromIndex, then -1 is returned.
There is no restriction on the value of fromIndex. If it is negative, it has the same effect as if it were zero: this entire string may be searched. If it is greater than the length of this string, it has the same effect as if it were equal to the length of this string: -1 is returned.

All indices are specified in char values (Unicode code units).

Parameters:
ch - a character (Unicode code point).
fromIndex - the index to start the search from.
Returns:
the index of the first occurrence of the character in the character sequence represented by this object that is greater than or equal to fromIndex, or -1 if the character does not occur.
lastIndexOf
public int lastIndexOf​(int ch)
Returns the index within this string of the last occurrence of the specified character. For values of ch in the range from 0 to 0xFFFF (inclusive), the index (in Unicode code units) returned is the largest value k such that:
 this.charAt(k) == ch
 
is true. For other values of ch, it is the largest value k such that:
 this.codePointAt(k) == ch
 
is true. In either case, if no such character occurs in this string, then -1 is returned. The String is searched backwards starting at the last character.
Parameters:
ch - a character (Unicode code point).
Returns:
the index of the last occurrence of the character in the character sequence represented by this object, or -1 if the character does not occur.
lastIndexOf
public int lastIndexOf​(int ch, int fromIndex)
Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index. For values of ch in the range from 0 to 0xFFFF (inclusive), the index returned is the largest value k such that:
 (this.charAt(k) == ch) && (k <= fromIndex)
 
is true. For other values of ch, it is the largest value k such that:
 (this.codePointAt(k) == ch) && (k <= fromIndex)
 
is true. In either case, if no such character occurs in this string at or before position fromIndex, then -1 is returned.
All indices are specified in char values (Unicode code units).

Parameters:
ch - a character (Unicode code point).
fromIndex - the index to start the search from. There is no restriction on the value of fromIndex. If it is greater than or equal to the length of this string, it has the same effect as if it were equal to one less than the length of this string: this entire string may be searched. If it is negative, it has the same effect as if it were -1: -1 is returned.
Returns:
the index of the last occurrence of the character in the character sequence represented by this object that is less than or equal to fromIndex, or -1 if the character does not occur before that point.
indexOf
public int indexOf​(String str)
Returns the index within this string of the first occurrence of the specified substring.
The returned index is the smallest value k for which:


 this.startsWith(str, k)
 
If no such value of k exists, then -1 is returned.
Parameters:
str - the substring to search for.
Returns:
the index of the first occurrence of the specified substring, or -1 if there is no such occurrence.
indexOf
public int indexOf​(String str, int fromIndex)
Returns the index within this string of the first occurrence of the specified substring, starting at the specified index.
The returned index is the smallest value k for which:


     k >= Math.min(fromIndex, this.length()) &&
                   this.startsWith(str, k)
 
If no such value of k exists, then -1 is returned.
Parameters:
str - the substring to search for.
fromIndex - the index from which to start the search.
Returns:
the index of the first occurrence of the specified substring, starting at the specified index, or -1 if there is no such occurrence.
lastIndexOf
public int lastIndexOf​(String str)
Returns the index within this string of the last occurrence of the specified substring. The last occurrence of the empty string "" is considered to occur at the index value this.length().
The returned index is the largest value k for which:


 this.startsWith(str, k)
 
If no such value of k exists, then -1 is returned.
Parameters:
str - the substring to search for.
Returns:
the index of the last occurrence of the specified substring, or -1 if there is no such occurrence.
lastIndexOf
public int lastIndexOf​(String str, int fromIndex)
Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index.
The returned index is the largest value k for which:


     k <= Math.min(fromIndex, this.length()) &&
                   this.startsWith(str, k)
 
If no such value of k exists, then -1 is returned.
Parameters:
str - the substring to search for.
fromIndex - the index to start the search from.
Returns:
the index of the last occurrence of the specified substring, searching backward from the specified index, or -1 if there is no such occurrence.
substring
public String substring​(int beginIndex)
Returns a string that is a substring of this string. The substring begins with the character at the specified index and extends to the end of this string.
Examples:

 "unhappy".substring(2) returns "happy"
 "Harbison".substring(3) returns "bison"
 "emptiness".substring(9) returns "" (an empty string)
 
Parameters:
beginIndex - the beginning index, inclusive.
Returns:
the specified substring.
Throws:
IndexOutOfBoundsException - if beginIndex is negative or larger than the length of this String object.
substring
public String substring​(int beginIndex, int endIndex)
Returns a string that is a substring of this string. The substring begins at the specified beginIndex and extends to the character at index endIndex - 1. Thus the length of the substring is endIndex-beginIndex.
Examples:

 "hamburger".substring(4, 8) returns "urge"
 "smiles".substring(1, 5) returns "mile"
 
Parameters:
beginIndex - the beginning index, inclusive.
endIndex - the ending index, exclusive.
Returns:
the specified substring.
Throws:
IndexOutOfBoundsException - if the beginIndex is negative, or endIndex is larger than the length of this String object, or beginIndex is larger than endIndex.
subSequence
public CharSequence subSequence​(int beginIndex, int endIndex)
Returns a character sequence that is a subsequence of this sequence.
An invocation of this method of the form

 str.subSequence(begin, end)
behaves in exactly the same way as the invocation
 str.substring(begin, end)
Specified by:
subSequence in interface CharSequence
API Note:
This method is defined so that the String class can implement the CharSequence interface.
Parameters:
beginIndex - the begin index, inclusive.
endIndex - the end index, exclusive.
Returns:
the specified subsequence.
Throws:
IndexOutOfBoundsException - if beginIndex or endIndex is negative, if endIndex is greater than length(), or if beginIndex is greater than endIndex
Since:
1.4
concat
public String concat​(String str)
Concatenates the specified string to the end of this string.
If the length of the argument string is 0, then this String object is returned. Otherwise, a String object is returned that represents a character sequence that is the concatenation of the character sequence represented by this String object and the character sequence represented by the argument string.

Examples:

 "cares".concat("s") returns "caress"
 "to".concat("get").concat("her") returns "together"
 
Parameters:
str - the String that is concatenated to the end of this String.
Returns:
a string that represents the concatenation of this object's characters followed by the string argument's characters.
replace
public String replace​(char oldChar, char newChar)
Returns a string resulting from replacing all occurrences of oldChar in this string with newChar.
If the character oldChar does not occur in the character sequence represented by this String object, then a reference to this String object is returned. Otherwise, a String object is returned that represents a character sequence identical to the character sequence represented by this String object, except that every occurrence of oldChar is replaced by an occurrence of newChar.

Examples:

 "mesquite in your cellar".replace('e', 'o')
         returns "mosquito in your collar"
 "the war of baronets".replace('r', 'y')
         returns "the way of bayonets"
 "sparring with a purple porpoise".replace('p', 't')
         returns "starring with a turtle tortoise"
 "JonL".replace('q', 'x') returns "JonL" (no change)
 
Parameters:
oldChar - the old character.
newChar - the new character.
Returns:
a string derived from this string by replacing every occurrence of oldChar with newChar.
matches
public boolean matches​(String regex)
Tells whether or not this string matches the given regular expression.
An invocation of this method of the form str.matches(regex) yields exactly the same result as the expression

Pattern.matches(regex, str)
Parameters:
regex - the regular expression to which this string is to be matched
Returns:
true if, and only if, this string matches the given regular expression
Throws:
PatternSyntaxException - if the regular expression's syntax is invalid
Since:
1.4
See Also:
Pattern
contains
public boolean contains​(CharSequence s)
Returns true if and only if this string contains the specified sequence of char values.
Parameters:
s - the sequence to search for
Returns:
true if this string contains s, false otherwise
Since:
1.5
replaceFirst
public String replaceFirst​(String regex, String replacement)
Replaces the first substring of this string that matches the given regular expression with the given replacement.
An invocation of this method of the form str.replaceFirst(regex, repl) yields exactly the same result as the expression

Pattern.compile(regex).matcher(str).replaceFirst(repl)
Note that backslashes (\) and dollar signs ($) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see Matcher.replaceFirst(java.lang.String). Use Matcher.quoteReplacement(java.lang.String) to suppress the special meaning of these characters, if desired.

Parameters:
regex - the regular expression to which this string is to be matched
replacement - the string to be substituted for the first match
Returns:
The resulting String
Throws:
PatternSyntaxException - if the regular expression's syntax is invalid
Since:
1.4
See Also:
Pattern
replaceAll
public String replaceAll​(String regex, String replacement)
Replaces each substring of this string that matches the given regular expression with the given replacement.
An invocation of this method of the form str.replaceAll(regex, repl) yields exactly the same result as the expression

Pattern.compile(regex).matcher(str).replaceAll(repl)
Note that backslashes (\) and dollar signs ($) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see Matcher.replaceAll. Use Matcher.quoteReplacement(java.lang.String) to suppress the special meaning of these characters, if desired.

Parameters:
regex - the regular expression to which this string is to be matched
replacement - the string to be substituted for each match
Returns:
The resulting String
Throws:
PatternSyntaxException - if the regular expression's syntax is invalid
Since:
1.4
See Also:
Pattern
replace
public String replace​(CharSequence target, CharSequence replacement)
Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence. The replacement proceeds from the beginning of the string to the end, for example, replacing "aa" with "b" in the string "aaa" will result in "ba" rather than "ab".
Parameters:
target - The sequence of char values to be replaced
replacement - The replacement sequence of char values
Returns:
The resulting string
Since:
1.5
split
public String[] split​(String regex, int limit)
Splits this string around matches of the given regular expression.
The array returned by this method contains each substring of this string that is terminated by another substring that matches the given expression or is terminated by the end of the string. The substrings in the array are in the order in which they occur in this string. If the expression does not match any part of the input then the resulting array has just one element, namely this string.

When there is a positive-width match at the beginning of this string then an empty leading substring is included at the beginning of the resulting array. A zero-width match at the beginning however never produces such empty leading substring.

The limit parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array.

If the limit is positive then the pattern will be applied at most limit - 1 times, the array's length will be no greater than limit, and the array's last entry will contain all input beyond the last matched delimiter.

If the limit is zero then the pattern will be applied as many times as possible, the array can have any length, and trailing empty strings will be discarded.

If the limit is negative then the pattern will be applied as many times as possible and the array can have any length.

The string "boo:and:foo", for example, yields the following results with these parameters:

Regex	Limit	Result
:	2	{ "boo", "and:foo" }
5	{ "boo", "and", "foo" }
-2	{ "boo", "and", "foo" }
o	5	{ "b", "", ":and:f", "", "" }
-2	{ "b", "", ":and:f", "", "" }
0	{ "b", "", ":and:f" }
An invocation of this method of the form str.split(regex, n) yields the same result as the expression

Pattern.compile(regex).split(str, n)
Parameters:
regex - the delimiting regular expression
limit - the result threshold, as described above
Returns:
the array of strings computed by splitting this string around matches of the given regular expression
Throws:
PatternSyntaxException - if the regular expression's syntax is invalid
Since:
1.4
See Also:
Pattern
split
public String[] split​(String regex)
Splits this string around matches of the given regular expression.
This method works as if by invoking the two-argument split method with the given expression and a limit argument of zero. Trailing empty strings are therefore not included in the resulting array.

The string "boo:and:foo", for example, yields the following results with these expressions:

Regex	Result
:	{ "boo", "and", "foo" }
o	{ "b", "", ":and:f" }
Parameters:
regex - the delimiting regular expression
Returns:
the array of strings computed by splitting this string around matches of the given regular expression
Throws:
PatternSyntaxException - if the regular expression's syntax is invalid
Since:
1.4
See Also:
Pattern
join
public static String join​(CharSequence delimiter, CharSequence... elements)
Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter.
For example,

     String message = String.join("-", "Java", "is", "cool");
     // message returned is: "Java-is-cool"
 
Note that if an element is null, then "null" is added.
Parameters:
delimiter - the delimiter that separates each element
elements - the elements to join together.
Returns:
a new String that is composed of the elements separated by the delimiter
Throws:
NullPointerException - If delimiter or elements is null
Since:
1.8
See Also:
StringJoiner
join
public static String join​(CharSequence delimiter, Iterable<? extends CharSequence> elements)
Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter.
For example,

     List<String> strings = List.of("Java", "is", "cool");
     String message = String.join(" ", strings);
     //message returned is: "Java is cool"

     Set<String> strings =
         new LinkedHashSet<>(List.of("Java", "is", "very", "cool"));
     String message = String.join("-", strings);
     //message returned is: "Java-is-very-cool"
 
Note that if an individual element is null, then "null" is added.
Parameters:
delimiter - a sequence of characters that is used to separate each of the elements in the resulting String
elements - an Iterable that will have its elements joined together.
Returns:
a new String that is composed from the elements argument
Throws:
NullPointerException - If delimiter or elements is null
Since:
1.8
See Also:
join(CharSequence,CharSequence...), StringJoiner
toLowerCase
public String toLowerCase​(Locale locale)
Converts all of the characters in this String to lower case using the rules of the given Locale. Case mapping is based on the Unicode Standard version specified by the Character class. Since case mappings are not always 1:1 char mappings, the resulting String may be a different length than the original String.
Examples of lowercase mappings are in the following table:

Language Code of Locale	Upper Case	Lower Case	Description
tr (Turkish)	\u0130	\u0069	capital letter I with dot above -> small letter i
tr (Turkish)	\u0049	\u0131	capital letter I -> small letter dotless i
(all)	French Fries	french fries	lowercased all chars in String
(all)	ΙΧΘΥΣ	ιχθυσ	lowercased all chars in String
Parameters:
locale - use the case transformation rules for this locale
Returns:
the String, converted to lowercase.
Since:
1.1
See Also:
toLowerCase(), toUpperCase(), toUpperCase(Locale)
toLowerCase
public String toLowerCase()
Converts all of the characters in this String to lower case using the rules of the default locale. This is equivalent to calling toLowerCase(Locale.getDefault()).
Note: This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance, "TITLE".toLowerCase() in a Turkish locale returns "t\u0131tle", where '\u0131' is the LATIN SMALL LETTER DOTLESS I character. To obtain correct results for locale insensitive strings, use toLowerCase(Locale.ROOT).

Returns:
the String, converted to lowercase.
See Also:
toLowerCase(Locale)
toUpperCase
public String toUpperCase​(Locale locale)
Converts all of the characters in this String to upper case using the rules of the given Locale. Case mapping is based on the Unicode Standard version specified by the Character class. Since case mappings are not always 1:1 char mappings, the resulting String may be a different length than the original String.
Examples of locale-sensitive and 1:M case mappings are in the following table.

Language Code of Locale	Lower Case	Upper Case	Description
tr (Turkish)	\u0069	\u0130	small letter i -> capital letter I with dot above
tr (Turkish)	\u0131	\u0049	small letter dotless i -> capital letter I
(all)	\u00df	\u0053 \u0053	small letter sharp s -> two letters: SS
(all)	Fahrvergnügen	FAHRVERGNÜGEN	
Parameters:
locale - use the case transformation rules for this locale
Returns:
the String, converted to uppercase.
Since:
1.1
See Also:
toUpperCase(), toLowerCase(), toLowerCase(Locale)
toUpperCase
public String toUpperCase()
Converts all of the characters in this String to upper case using the rules of the default locale. This method is equivalent to toUpperCase(Locale.getDefault()).
Note: This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance, "title".toUpperCase() in a Turkish locale returns "T\u0130TLE", where '\u0130' is the LATIN CAPITAL LETTER I WITH DOT ABOVE character. To obtain correct results for locale insensitive strings, use toUpperCase(Locale.ROOT).

Returns:
the String, converted to uppercase.
See Also:
toUpperCase(Locale)
trim
public String trim()
Returns a string whose value is this string, with all leading and trailing space removed, where space is defined as any character whose codepoint is less than or equal to 'U+0020' (the space character).
If this String object represents an empty character sequence, or the first and last characters of character sequence represented by this String object both have codes that are not space (as defined above), then a reference to this String object is returned.

Otherwise, if all characters in this string are space (as defined above), then a String object representing an empty string is returned.

Otherwise, let k be the index of the first character in the string whose code is not a space (as defined above) and let m be the index of the last character in the string whose code is not a space (as defined above). A String object is returned, representing the substring of this string that begins with the character at index k and ends with the character at index m-that is, the result of this.substring(k, m + 1).

This method may be used to trim space (as defined above) from the beginning and end of a string.

Returns:
a string whose value is this string, with all leading and trailing space removed, or this string if it has no leading or trailing space.
strip
public String strip()
Returns a string whose value is this string, with all leading and trailing white space removed.
If this String object represents an empty string, or if all code points in this string are white space, then an empty string is returned.

Otherwise, returns a substring of this string beginning with the first code point that is not a white space up to and including the last code point that is not a white space.

This method may be used to strip white space from the beginning and end of a string.

Returns:
a string whose value is this string, with all leading and trailing white space removed
Since:
11
See Also:
Character.isWhitespace(int)
stripLeading
public String stripLeading()
Returns a string whose value is this string, with all leading white space removed.
If this String object represents an empty string, or if all code points in this string are white space, then an empty string is returned.

Otherwise, returns a substring of this string beginning with the first code point that is not a white space up to to and including the last code point of this string.

This method may be used to trim white space from the beginning of a string.

Returns:
a string whose value is this string, with all leading white space removed
Since:
11
See Also:
Character.isWhitespace(int)
stripTrailing
public String stripTrailing()
Returns a string whose value is this string, with all trailing white space removed.
If this String object represents an empty string, or if all characters in this string are white space, then an empty string is returned.

Otherwise, returns a substring of this string beginning with the first code point of this string up to and including the last code point that is not a white space.

This method may be used to trim white space from the end of a string.

Returns:
a string whose value is this string, with all trailing white space removed
Since:
11
See Also:
Character.isWhitespace(int)
isBlank
public boolean isBlank()
Returns true if the string is empty or contains only white space codepoints, otherwise false.
Returns:
true if the string is empty or contains only white space codepoints, otherwise false
Since:
11
See Also:
Character.isWhitespace(int)
lines
public Stream<String> lines()
Returns a stream of lines extracted from this string, separated by line terminators.
A line terminator is one of the following: a line feed character "\n" (U+000A), a carriage return character "\r" (U+000D), or a carriage return followed immediately by a line feed "\r\n" (U+000D U+000A).

A line is either a sequence of zero or more characters followed by a line terminator, or it is a sequence of one or more characters followed by the end of the string. A line does not include the line terminator.

The stream returned by this method contains the lines from this string in the order in which they occur.

API Note:
This definition of line implies that an empty string has zero lines and that there is no empty line following a line terminator at the end of a string.
Implementation Note:
This method provides better performance than split("\R") by supplying elements lazily and by faster search of new line terminators.
Returns:
the stream of lines extracted from this string
Since:
11
toString
public String toString()
This object (which is already a string!) is itself returned.
Specified by:
toString in interface CharSequence
Overrides:
toString in class Object
Returns:
the string itself.
chars
public IntStream chars()
Returns a stream of int zero-extending the char values from this sequence. Any char which maps to a surrogate code point is passed through uninterpreted.
Specified by:
chars in interface CharSequence
Returns:
an IntStream of char values from this sequence
Since:
9
codePoints
public IntStream codePoints()
Returns a stream of code point values from this sequence. Any surrogate pairs encountered in the sequence are combined as if by Character.toCodePoint and the result is passed to the stream. Any other code units, including ordinary BMP characters, unpaired surrogates, and undefined code units, are zero-extended to int values which are then passed to the stream.
Specified by:
codePoints in interface CharSequence
Returns:
an IntStream of Unicode code points from this sequence
Since:
9
toCharArray
public char[] toCharArray()
Converts this string to a new character array.
Returns:
a newly allocated character array whose length is the length of this string and whose contents are initialized to contain the character sequence represented by this string.
format
public static String format​(String format, Object... args)
Returns a formatted string using the specified format string and arguments.
The locale always used is the one returned by Locale.getDefault(Locale.Category) with FORMAT category specified.

Parameters:
format - A format string
args - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java™ Virtual Machine Specification. The behaviour on a null argument depends on the conversion.
Returns:
A formatted string
Throws:
IllegalFormatException - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification.
Since:
1.5
See Also:
Formatter
format
public static String format​(Locale l, String format, Object... args)
Returns a formatted string using the specified locale, format string, and arguments.
Parameters:
l - The locale to apply during formatting. If l is null then no localization is applied.
format - A format string
args - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java™ Virtual Machine Specification. The behaviour on a null argument depends on the conversion.
Returns:
A formatted string
Throws:
IllegalFormatException - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification
Since:
1.5
See Also:
Formatter
valueOf
public static String valueOf​(Object obj)
Returns the string representation of the Object argument.
Parameters:
obj - an Object.
Returns:
if the argument is null, then a string equal to "null"; otherwise, the value of obj.toString() is returned.
See Also:
Object.toString()
valueOf
public static String valueOf​(char[] data)
Returns the string representation of the char array argument. The contents of the character array are copied; subsequent modification of the character array does not affect the returned string.
Parameters:
data - the character array.
Returns:
a String that contains the characters of the character array.
valueOf
public static String valueOf​(char[] data, int offset, int count)
Returns the string representation of a specific subarray of the char array argument.
The offset argument is the index of the first character of the subarray. The count argument specifies the length of the subarray. The contents of the subarray are copied; subsequent modification of the character array does not affect the returned string.

Parameters:
data - the character array.
offset - initial offset of the subarray.
count - length of the subarray.
Returns:
a String that contains the characters of the specified subarray of the character array.
Throws:
IndexOutOfBoundsException - if offset is negative, or count is negative, or offset+count is larger than data.length.
copyValueOf
public static String copyValueOf​(char[] data, int offset, int count)
Equivalent to valueOf(char[], int, int).
Parameters:
data - the character array.
offset - initial offset of the subarray.
count - length of the subarray.
Returns:
a String that contains the characters of the specified subarray of the character array.
Throws:
IndexOutOfBoundsException - if offset is negative, or count is negative, or offset+count is larger than data.length.
copyValueOf
public static String copyValueOf​(char[] data)
Equivalent to valueOf(char[]).
Parameters:
data - the character array.
Returns:
a String that contains the characters of the character array.
valueOf
public static String valueOf​(boolean b)
Returns the string representation of the boolean argument.
Parameters:
b - a boolean.
Returns:
if the argument is true, a string equal to "true" is returned; otherwise, a string equal to "false" is returned.
valueOf
public static String valueOf​(char c)
Returns the string representation of the char argument.
Parameters:
c - a char.
Returns:
a string of length 1 containing as its single character the argument c.
valueOf
public static String valueOf​(int i)
Returns the string representation of the int argument.
The representation is exactly the one returned by the Integer.toString method of one argument.

Parameters:
i - an int.
Returns:
a string representation of the int argument.
See Also:
Integer.toString(int, int)
valueOf
public static String valueOf​(long l)
Returns the string representation of the long argument.
The representation is exactly the one returned by the Long.toString method of one argument.

Parameters:
l - a long.
Returns:
a string representation of the long argument.
See Also:
Long.toString(long)
valueOf
public static String valueOf​(float f)
Returns the string representation of the float argument.
The representation is exactly the one returned by the Float.toString method of one argument.

Parameters:
f - a float.
Returns:
a string representation of the float argument.
See Also:
Float.toString(float)
valueOf
public static String valueOf​(double d)
Returns the string representation of the double argument.
The representation is exactly the one returned by the Double.toString method of one argument.

Parameters:
d - a double.
Returns:
a string representation of the double argument.
See Also:
Double.toString(double)
intern
public String intern()
Returns a canonical representation for the string object.
A pool of strings, initially empty, is maintained privately by the class String.

When the intern method is invoked, if the pool already contains a string equal to this String object as determined by the equals(Object) method, then the string from the pool is returned. Otherwise, this String object is added to the pool and a reference to this String object is returned.

It follows that for any two strings s and t, s.intern() == t.intern() is true if and only if s.equals(t) is true.

All literal strings and string-valued constant expressions are interned. String literals are defined in section 3.10.5 of the The Java™ Language Specification.

Returns:
a string that has the same contents as this string, but is guaranteed to be from a pool of unique strings.
See The Java™ Language Specification:
3.10.5 String Literals
repeat
public String repeat​(int count)
Returns a string whose value is the concatenation of this string repeated count times.
If this string is empty or count is zero then the empty string is returned.

Parameters:
count - number of times to repeat
Returns:
A string composed of this string repeated count times or the empty string if this string is empty or count is zero
Throws:
IllegalArgumentException - if the count is negative.
Since:
11

--- SUPPLEMENTALS ---
(Human Geography AMSCO Textbook)
